{"version":3,"sources":["../../../src/object.ts","../../../src/assertion.ts","../../../src/image.tsx","../../../src/array.ts","../../../src/responsive.ts","../../../src/create-media-query.ts","../../../src/use-breakpoint-value.ts","../../../src/use-breakpoint.ts","../../../src/media-query.utils.ts","../../../src/dom.ts","../../../src/skeleton.tsx","../../../src/function.ts","../../../src/collapse.tsx"],"names":["fn","cache","memoize","key","path","index","obj","NativeImage","alt","width","height","ref","Image","forwardRef","crossOrigin","shouldIgnore","loading","status","useImage","ignoreFallback","shared","objectFit","objectPosition","align","rest","result","Object","keys","object","omit","as","className","src","fallbackSrc","isCustomBreakpoint","maybeBreakpoint","Number","isArray","Array","breakpoints","createMediaQueries","a","b","next","arr","maxWidth","minWidth","breakpoint","query","parseInt","toMediaString","value","match","parseFloat","calculateMeasurement","subtract","createMediaQueryString","measurementRegex","isNumber","useBreakpointValue","defaultBreakpoint","useTheme","mediaQueries","base","mediaQuery","current","currentBreakpoint","update","setCurrentBreakpoint","React","listeners","window","handleChange","useBreakpoint","theme","defaultBreakPoints","values","stopIndex","getClosestValue","bps","arrayToObjectNotation","carry","cx","classNames","__DEV__","process","StyledSkeleton","chakra","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","fade","keyframes","from","opacity","to","Skeleton","styles","useStyleConfig","isFirstRender","useIsFirstRender","omitThemingProps","_className","animation","__css","fadeDuration","speed","SkeletonText","props","noOfLines","spacing","skeletonHeight","children","noOfLinesValue","numbers","getWidth","isLoaded","sizeProps","mb","number","startColor","endColor","SkeletonCircle","size","borderRadius","boxSize","once","args","warn","options","message","condition","console","hasHeightValue","variants","exit","transition","duration","ease","EASINGS","enter","Collapse","in","animateOpacity","startingHeight","endingHeight","onAnimationComplete","fromZeroHeight","useUpdateEffect","setDisplay","setOpen","custom","ownProps","open","style","overflow","initial","isOpen","animate","display"],"mappings":"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","file":"static/js/0.ba936818.chunk.js","sourcesContent":["import type { Dict, Omit } from \"./types\"\n\nexport { default as mergeWith } from \"lodash.mergewith\"\nexport { default as objectAssign } from \"object-assign\"\n\nexport function omit<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as K)) return\n    result[key] = object[key]\n  })\n\n  return result as Omit<T, K>\n}\n\nexport function pick<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result = {} as { [P in K]: T[P] }\n\n  keys.forEach((key) => {\n    if (key in object) {\n      result[key] = object[key]\n    }\n  })\n\n  return result\n}\n\nexport function split<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const picked: Dict = {}\n  const omitted: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as T[K])) {\n      picked[key] = object[key]\n    } else {\n      omitted[key] = object[key]\n    }\n  })\n\n  return [picked, omitted] as [{ [P in K]: T[P] }, Omit<T, K>]\n}\n\n/**\n * Get value from a deeply nested object using a string path.\n * Memoizes the value.\n * @param obj - the object\n * @param path - the string path\n * @param def  - the fallback value\n */\nexport function get(\n  obj: object,\n  path: string | number,\n  fallback?: any,\n  index?: number,\n) {\n  const key = typeof path === \"string\" ? path.split(\".\") : [path]\n\n  for (index = 0; index < key.length; index += 1) {\n    if (!obj) break\n    obj = obj[key[index]]\n  }\n\n  return obj === undefined ? fallback : obj\n}\n\ntype Get = (\n  obj: Readonly<object>,\n  path: string | number,\n  fallback?: any,\n  index?: number,\n) => any\n\nexport const memoize = (fn: Get) => {\n  const cache = new WeakMap()\n\n  const memoizedFn: Get = (obj, path, fallback, index) => {\n    if (typeof obj === \"undefined\") {\n      return fn(obj, path, fallback)\n    }\n\n    if (!cache.has(obj)) {\n      cache.set(obj, new Map())\n    }\n\n    const map = cache.get(obj)\n\n    if (map.has(path)) {\n      return map.get(path)\n    }\n\n    const value = fn(obj, path, fallback, index)\n\n    map.set(path, value)\n\n    return value\n  }\n\n  return memoizedFn\n}\n\nexport const memoizedGet = memoize(get)\n\n/**\n * Get value from deeply nested object, based on path\n * It returns the path value if not found in object\n *\n * @param path - the string path or value\n * @param scale - the string path or value\n */\nexport function getWithDefault(path: any, scale: any) {\n  return memoizedGet(scale, path, path)\n}\n\ntype FilterFn<T> = (value: any, key: string, object: T) => boolean\n\n/**\n * Returns the items of an object that meet the condition specified in a callback function.\n *\n * @param object the object to loop through\n * @param fn The filter function\n */\nexport function objectFilter<T extends Dict>(object: T, fn: FilterFn<T>) {\n  const result: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    const value = object[key]\n    const shouldPass = fn(value, key, object)\n    if (shouldPass) {\n      result[key] = value\n    }\n  })\n\n  return result\n}\n\nexport const filterUndefined = (object: Dict) =>\n  objectFilter(object, (val) => val !== null && val !== undefined)\n\nexport const objectKeys = <T extends Dict>(obj: T) =>\n  (Object.keys(obj) as unknown) as (keyof T)[]\n\n/**\n * Object.entries polyfill for Nodev10 compatibility\n */\nexport const fromEntries = <T extends unknown>(entries: [string, any][]) =>\n  entries.reduce((carry, [key, value]) => {\n    carry[key] = value\n    return carry\n  }, {}) as T\n","import { ChangeEvent } from \"react\"\nimport { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport const isNotNumber = (value: any) =>\n  typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value)\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport const isEmptyArray = (value: any) => isArray(value) && value.length === 0\n\n// Function assertions\nexport function isFunction(value: any): value is Function {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport const isDefined = (value: any) =>\n  typeof value !== \"undefined\" && value !== undefined\n\nexport const isUndefined = (value: any): value is undefined =>\n  typeof value === \"undefined\" || value === undefined\n\n// Object assertions\nexport const isObject = (value: any): value is Dict => {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport const isEmptyObject = (value: any) =>\n  isObject(value) && Object.keys(value).length === 0\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport const isNull = (value: any): value is null => value == null\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\n// Event assertions\nexport function isInputEvent(value: any): value is ChangeEvent {\n  return value && isObject(value) && isObject(value.target)\n}\n\n// Empty assertions\nexport const isEmpty = (value: any) => {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n","import {\n  chakra,\n  PropsOf,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useImage, UseImageProps } from \"./use-image\"\n\ninterface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nconst NativeImage = React.forwardRef(\n  (props: NativeImageProps, ref: React.Ref<any>) => {\n    const { htmlWidth, htmlHeight, alt, ...rest } = props\n    return (\n      <img\n        width={htmlWidth}\n        height={htmlHeight}\n        ref={ref}\n        alt={alt}\n        {...rest}\n      />\n    )\n  },\n)\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/docs/data-display/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">((props, ref) => {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    ...rest\n  } = props\n\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   */\n  const shouldIgnore = loading != null || ignoreFallback\n\n  const status = useImage({\n    ...props,\n    ignoreFallback: shouldIgnore,\n  })\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnore ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (status !== \"loaded\") {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nexport interface ImgProps extends HTMLChakraProps<\"img\">, NativeImageOptions {}\n\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\nexport const Img = forwardRef<ImgProps, \"img\">((props, ref) => (\n  <chakra.img ref={ref} as={NativeImage} className=\"chakra-image\" {...props} />\n))\n\nif (__DEV__) {\n  Image.displayName = \"Image\"\n}\n","export function getFirstItem<T>(array: T[]) {\n  return array != null && array.length ? array[0] : undefined\n}\n\nexport function getLastItem<T>(array: T[]) {\n  const length = array == null ? 0 : array.length\n  return length ? array[length - 1] : undefined\n}\n\nexport function getPrevItem<T>(index: number, array: T[], loop = true) {\n  const prevIndex = getPrevIndex(index, array.length, loop)\n  return array[prevIndex]\n}\n\nexport function getNextItem<T>(index: number, array: T[], loop = true) {\n  const nextIndex = getNextIndex(index, array.length, 1, loop)\n  return array[nextIndex]\n}\n\nexport function removeIndex<T>(array: T[], index: number) {\n  return array.filter((_, idx) => idx !== index)\n}\n\nexport function addItem<T>(array: T[], item: T) {\n  return [...array, item]\n}\n\nexport function removeItem<T>(array: T[], item: T) {\n  return array.filter((eachItem) => eachItem !== item)\n}\n\n/**\n * Get the next index based on the current index and step.\n *\n * @param currentIndex the current index\n * @param length the total length or count of items\n * @param step the number of steps\n * @param loop whether to circle back once `currentIndex` is at the start/end\n */\nexport function getNextIndex(\n  currentIndex: number,\n  length: number,\n  step = 1,\n  loop = true,\n) {\n  const lastIndex = length - 1\n\n  if (currentIndex === -1) {\n    return step > 0 ? 0 : lastIndex\n  }\n\n  const nextIndex = currentIndex + step\n\n  if (nextIndex < 0) {\n    return loop ? lastIndex : 0\n  }\n\n  if (nextIndex >= length) {\n    if (loop) return 0\n    return currentIndex > length ? length : currentIndex\n  }\n\n  return nextIndex\n}\n\n/**\n * Get's the previous index based on the current index.\n * Mostly used for keyboard navigation.\n *\n * @param index - the current index\n * @param count - the length or total count of items in the array\n * @param loop - whether we should circle back to the\n * first/last once `currentIndex` is at the start/end\n */\nexport function getPrevIndex(currentIndex: number, count: number, loop = true) {\n  return getNextIndex(currentIndex, count, -1, loop)\n}\n\n/**\n * Converts an array into smaller chunks or groups.\n *\n * @param array the array to chunk into group\n * @param size the length of each chunk\n */\nexport function chunk<T>(array: T[], size: number): T[][] {\n  return array.reduce((rows: T[][], currentValue: T, index: number) => {\n    if (index % size === 0) {\n      rows.push([currentValue])\n    } else {\n      rows[rows.length - 1].push(currentValue)\n    }\n    return rows\n  }, [] as T[][])\n}\n\n/**\n * Gets the next item based on a search string\n *\n * @param items array of items\n * @param searchString the search string\n * @param itemToString resolves an item to string\n * @param currentItem the current selected item\n */\nexport function getNextItemFromSearch<T>(\n  items: T[],\n  searchString: string,\n  itemToString: (item: T) => string,\n  currentItem: T,\n) {\n  if (searchString == null) {\n    return currentItem\n  }\n\n  // If current item doesn't exist, find the item that matches the search string\n  if (!currentItem) {\n    const foundItem = items.find((item) =>\n      itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n    )\n    return foundItem\n  }\n\n  // Filter items for ones that match the search string (case insensitive)\n  const matchingItems = items.filter((item) =>\n    itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n  )\n\n  // If there's a match, let's get the next item to select\n  if (matchingItems.length > 0) {\n    let nextIndex: number\n\n    // If the currentItem is in the available items, we move to the next available option\n    if (matchingItems.includes(currentItem)) {\n      const currentIndex = matchingItems.indexOf(currentItem)\n      nextIndex = currentIndex + 1\n      if (nextIndex === matchingItems.length) {\n        nextIndex = 0\n      }\n      return matchingItems[nextIndex]\n    }\n    // Else, we pick the first item in the available items\n    nextIndex = items.indexOf(matchingItems[0])\n    return items[nextIndex]\n  }\n\n  // a decent fallback to the currentItem\n  return currentItem\n}\n\n/**\n * since breakpoints are defined as custom properties on an array, you may\n * `Object.keys(theme.breakpoints)` to retrieve both regular numeric indices\n * and custom breakpoints as string.\n *\n * This function returns true given a custom array property.\n */\nexport const isCustomBreakpoint = (maybeBreakpoint: string) =>\n  Number.isNaN(Number(maybeBreakpoint))\n","import { isArray, isObject } from \"./assertion\"\nimport { Dict } from \"./types\"\nimport { objectKeys } from \"./object\"\nimport { getLastItem } from \"./array\"\n\nexport const breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n","import { isNumber, isCustomBreakpoint, StringOrNumber } from \"@chakra-ui/utils\"\n\nexport default function createMediaQueries(\n  breakpoints: string[],\n): MediaQuery[] {\n  return (\n    Object.entries(breakpoints)\n      .filter(([key]) => isCustomBreakpoint(key))\n      // sort css units in ascending order to ensure media queries are generated\n      // in the correct order and reference to each other correctly aswell\n      .sort((a, b) =>\n        Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1,\n      )\n      .map(([breakpoint, minWidth], index, arr) => {\n        // given a following breakpoint\n        const next = arr[index + 1]\n        // this breakpoint must end prior the threshold of the next\n        const maxWidth = next ? next[1] : undefined\n        const query = createMediaQueryString(minWidth, maxWidth)\n\n        return {\n          minWidth,\n          maxWidth,\n          breakpoint,\n          query,\n        }\n      })\n  )\n}\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueryString(minWidth: string, maxWidth?: string) {\n  const hasMinWidth = parseInt(minWidth, 10) >= 0\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\"\n  }\n\n  let query = `(min-width: ${toMediaString(minWidth)})`\n\n  if (!maxWidth) {\n    return query\n  }\n\n  if (query) {\n    query += \" and \"\n  }\n\n  query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n\n  return query\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nconst measurementRegex = /(\\d+\\.?\\d*)/u\n\nconst calculateMeasurement = (\n  value: StringOrNumber,\n  modifier: number,\n): string => {\n  if (typeof value === \"number\") {\n    return `${value + modifier}`\n  }\n\n  return value.replace(\n    measurementRegex,\n    (match) => `${parseFloat(match) + modifier}`,\n  )\n}\n\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\nfunction subtract(value: string) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: StringOrNumber) {\n  return isNumber(value) ? `${value}px` : value\n}\n","import { useTheme } from \"@chakra-ui/system\"\nimport {\n  arrayToObjectNotation,\n  fromEntries,\n  isArray,\n  isCustomBreakpoint,\n} from \"@chakra-ui/utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\nexport function useBreakpointValue<T = any>(\n  values: Record<string, T> | T[],\n): T | undefined {\n  const breakpoint = useBreakpoint()\n  const theme = useTheme()\n\n  if (!breakpoint) return undefined\n\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Object.keys(theme.breakpoints).filter(isCustomBreakpoint)\n\n  const obj = isArray(values)\n    ? fromEntries<Record<string, T>>(\n        Object.entries(\n          arrayToObjectNotation(values, breakpoints),\n        ).map(([key, value]) => [key, value]),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n","import { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update])\n\n  return current\n}\n","import { breakpoints as defaultBreakPoints } from \"@chakra-ui/utils\"\n\nexport function getClosestValue<T = any>(\n  values: Record<string, T>,\n  breakpoint: string,\n  breakpoints = defaultBreakPoints,\n) {\n  let index = Object.keys(values).indexOf(breakpoint)\n\n  if (index !== -1) {\n    return values[breakpoint]\n  }\n\n  let stopIndex = breakpoints.indexOf(breakpoint)\n\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex]\n\n    if (values[key] != null) {\n      index = stopIndex\n      break\n    }\n    stopIndex -= 1\n  }\n\n  if (index !== -1) {\n    const key = breakpoints[index]\n    return values[key]\n  }\n\n  return undefined\n}\n","import * as React from \"react\"\nimport { Booleanish, EventKeys } from \"./types\"\n\nexport function getOwnerWindow(node?: HTMLElement | null) {\n  return node instanceof Element\n    ? getOwnerDocument(node).defaultView ?? window\n    : window\n}\n\nexport function getOwnerDocument(node?: HTMLElement | null) {\n  return node instanceof Element ? node.ownerDocument ?? document : document\n}\n\nexport function canUseDOM() {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.document &&\n    window.document.createElement\n  )\n}\n\nexport const isBrowser = canUseDOM()\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nexport function normalizeEventKey(event: React.KeyboardEvent) {\n  const { key, keyCode } = event\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0\n\n  const eventKey = isArrowKey ? `Arrow${key}` : key\n\n  return eventKey as EventKeys\n}\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? \"\" : undefined) as Booleanish\n\nexport const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined\n\nexport const cx = (...classNames: any[]) => classNames.filter(Boolean).join(\" \")\n\nexport function getActiveElement(node?: HTMLElement) {\n  const doc = getOwnerDocument(node)\n  return doc?.activeElement as HTMLElement\n}\n\nexport function contains(parent: HTMLElement, child: HTMLElement) {\n  return parent === child || parent.contains(child)\n}\n","import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   * @default\n   * 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds\n   *\n   * @default\n   * 0.4\n   */\n  fadeDuration?: number\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst useIsFirstRender = () => {\n  const isFirstRender = React.useRef(true)\n\n  React.useEffect(() => {\n    isFirstRender.current = false\n  }, [])\n\n  return isFirstRender.current\n}\n\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  if (isLoaded) {\n    const animation = isFirstRender ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton ref={ref} className={_className} {...rest} __css={styles} />\n  )\n})\n\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8,\n}\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\"\n}\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\n\nconst defaultNoOfLines = 3\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\"\n}\n\nexport const SkeletonCircle: React.FC<SkeletonProps> = ({\n  size = \"2rem\",\n  ...rest\n}) => <Skeleton borderRadius=\"full\" boxSize={size} {...rest} />\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\"\n}\n","import { isFunction, __DEV__ } from \"./assertion\"\nimport { AnyFunction, FunctionArguments } from \"./types\"\n\nexport function runIfFn<T, U>(\n  valueOrFn: T | ((...fnArgs: U[]) => T),\n  ...args: U[]\n): T {\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n\nexport function callAllHandlers<T extends (event: any) => void>(\n  ...fns: (T | undefined)[]\n) {\n  return function func(event: FunctionArguments<T>[0]) {\n    fns.some((fn) => {\n      fn?.(event)\n      return event?.defaultPrevented\n    })\n  }\n}\n\nexport function callAll<T extends AnyFunction>(...fns: (T | undefined)[]) {\n  return function mergedFn(arg: FunctionArguments<T>[0]) {\n    fns.forEach((fn) => {\n      fn?.(arg)\n    })\n  }\n}\n\nexport const compose = <T>(\n  fn1: (...args: T[]) => T,\n  ...fns: Array<(...args: T[]) => T>\n) => fns.reduce((f1, f2) => (...args) => f1(f2(...args)), fn1)\n\nexport function once(fn?: Function | null) {\n  let result: any\n\n  return function func(this: any, ...args: any[]) {\n    if (fn) {\n      result = fn.apply(this, args)\n      fn = null\n    }\n\n    return result\n  }\n}\n\nexport const noop = () => {}\n\ntype MessageOptions = {\n  condition: boolean\n  message: string\n}\n\nexport const warn = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.warn(message)\n  }\n})\n\nexport const error = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.error(message)\n  }\n})\n","import { useUpdateEffect } from \"@chakra-ui/hooks\"\nimport { cx, warn, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype CollapseVariants = MotionVariants<\"enter\" | \"exit\">\n\nconst hasHeightValue = (value?: string | number) =>\n  value != null && parseInt(value.toString(), 10) > 0\n\nconst variants: CollapseVariants = {\n  exit: (props: CollapseOptions) => ({\n    ...(props.animateOpacity && {\n      opacity: hasHeightValue(props.startingHeight) ? 1 : 0,\n    }),\n    height: props.startingHeight,\n    transition: {\n      height: { duration: 0.2, ease: EASINGS.ease },\n      opacity: { duration: 0.3, ease: EASINGS.ease },\n    },\n  }),\n  enter: (props: CollapseOptions) => ({\n    ...(props.animateOpacity && {\n      opacity: 1,\n    }),\n    height: props.endingHeight,\n    transition: {\n      height: {\n        duration: 0.3,\n        ease: EASINGS.ease,\n      },\n      opacity: {\n        duration: 0.4,\n        ease: EASINGS.ease,\n      },\n    },\n  }),\n}\n\nexport interface CollapseOptions {\n  /**\n   * If `true`, the opacity of the content will be animated\n   * @default true\n   */\n  animateOpacity?: boolean\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * If `true`, the content will be expanded\n   */\n  in?: boolean\n  /**\n   * The height you want the content in its collapsed state.\n   * @default 0\n   */\n  startingHeight?: number | string\n  /**\n   * The height you want the content in its expanded state.\n   * @default \"auto\"\n   */\n  endingHeight?: number | string\n}\n\nexport type ICollapse = CollapseProps\n\ntype Display = React.CSSProperties[\"display\"]\n\nexport interface CollapseProps\n  extends HTMLMotionProps<\"div\">,\n    CollapseOptions {}\n\nexport const Collapse = React.forwardRef<HTMLDivElement, CollapseProps>(\n  (props, ref) => {\n    const {\n      in: isOpen,\n      unmountOnExit,\n      animateOpacity = true,\n      startingHeight = 0,\n      endingHeight = \"auto\",\n      style,\n      className,\n      onAnimationComplete,\n      ...rest\n    } = props\n\n    const fromZeroHeight = startingHeight === 0\n\n    const [open, setOpen] = React.useState(!!isOpen)\n\n    const getInitialHidden = () => {\n      // If it is open by default, no need to apply `aria-hidden`\n      if (isOpen) return false\n      // If startingHeight > 0, then content is partially visible\n      if (hasHeightValue(startingHeight)) return false\n      // Else, the content is hidden\n      return true\n    }\n\n    const [display, setDisplay] = React.useState<Display>(() => {\n      if (!fromZeroHeight) return \"block\"\n      const hidden = getInitialHidden()\n      return hidden ? \"none\" : \"block\"\n    })\n\n    useUpdateEffect(() => {\n      setDisplay(\"block\")\n      setOpen(!!isOpen)\n    }, [isOpen])\n\n    /**\n     * Warn 🚨: `startingHeight` and `unmountOnExit` are mutually exclusive\n     *\n     * If you specify a starting height, the collapsed needs to be mounted\n     * for the height to take effect.\n     */\n    if (startingHeight > 0 && unmountOnExit) {\n      warn(\n        `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`,\n      )\n    }\n\n    const custom = { startingHeight, endingHeight, animateOpacity }\n\n    const ownProps: HTMLMotionProps<\"div\"> & React.RefAttributes<any> = {\n      ref,\n      onAnimationComplete: () => {\n        if (!open && fromZeroHeight) {\n          setDisplay(\"none\")\n        }\n        onAnimationComplete?.()\n      },\n      className: cx(\"chakra-collapse\", className),\n      ...rest,\n      variants,\n      style: { overflow: \"hidden\", ...style },\n      custom,\n    }\n\n    if (unmountOnExit) {\n      return (\n        <AnimatePresence initial={false} custom={custom}>\n          {isOpen && (\n            <motion.div\n              {...ownProps}\n              initial=\"exit\"\n              animate=\"enter\"\n              exit=\"exit\"\n            />\n          )}\n        </AnimatePresence>\n      )\n    }\n\n    return (\n      <motion.div\n        {...ownProps}\n        style={{ ...ownProps.style, display }}\n        initial={false}\n        animate={open ? \"enter\" : \"exit\"}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  Collapse.displayName = \"Collapse\"\n}\n"],"sourceRoot":""}