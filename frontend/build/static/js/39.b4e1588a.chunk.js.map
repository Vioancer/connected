{"version":3,"sources":["app/components/ImageCropper/ImageCropper.tsx"],"names":["ImageCropper","photo","showImageCropper","closeImageCropper","setImageSettings","setCroppedImage","imageSettings","useState","imageInstance","setImageInstance","size","isOpen","scrollBehavior","onClose","h","pt","style","height","width","src","aspectRatio","viewMode","guides","minCropBoxHeight","minCropBoxWidth","background","responsive","autoCropArea","onInitialized","instance","onClick","getCroppedCanvas","toBlob","blob","URL","createObjectURL","getData","rounded"],"mappings":"2LAwFeA,UAjEuB,SAAC,GAOhC,IANNC,EAMK,EANLA,MACAC,EAKK,EALLA,iBACAC,EAIK,EAJLA,kBACAC,EAGK,EAHLA,iBACAC,EAEK,EAFLA,gBACAC,EACK,EADLA,cACK,EACqCC,qBADrC,mBACEC,EADF,KACiBC,EADjB,KAeL,OACC,eAAC,IAAD,CACCC,KAAK,KACLC,OAAQT,EACRU,eAAe,SACfC,QAASV,EAJV,UAKC,cAAC,IAAD,IACA,cAAC,IAAD,UACC,eAAC,IAAD,WACC,cAAC,IAAD,IAEA,eAAC,IAAD,CAAKW,EAAE,OAAOC,GAAI,GAAlB,UACEb,GAAoBD,GACpB,mCACC,cAAC,IAAD,aACCe,MAAO,CAAEC,OAAQ,IAAKC,MAAO,QAC7BC,IAAKlB,EACLmB,YAAa,EACbC,SAAU,EACVC,QAAQ,EACRC,iBAAkB,GAClBC,gBAAiB,GACjBC,YAAY,EACZC,YAAY,EACZC,aAAc,EACdC,cAAe,SAACC,GACfpB,EAAiBoB,KAEdvB,MAIP,0BAED,cAAC,IAAD,UACC,cAAC,IAAD,CAAQwB,QA/CO,WACftB,IACHA,EAAcuB,mBAAmBC,QAAO,SAACC,GACxC5B,EAAgB6B,IAAIC,gBAAgBF,OAGrC7B,EAAiBI,EAAc4B,QAAQ,CAAEC,SAAS,KAElDlC,MAuCG","file":"static/js/39.b4e1588a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\nimport {\n\tBox,\n\tButton,\n\tModal,\n\tModalCloseButton,\n\tModalContent,\n\tModalFooter,\n\tModalOverlay,\n} from '@chakra-ui/react';\n\ninterface Props {\n\tphoto: any;\n\tshowImageCropper: boolean;\n\tcloseImageCropper: () => void;\n\timageSettings: object;\n\tsetImageSettings: any;\n\tsetCroppedImage: any;\n}\n\nconst ImageCropper: React.FC<Props> = ({\n\tphoto,\n\tshowImageCropper,\n\tcloseImageCropper,\n\tsetImageSettings,\n\tsetCroppedImage,\n\timageSettings,\n}) => {\n\tconst [imageInstance, setImageInstance] = useState<any>();\n\n\tconst saveDetails = () => {\n\t\tif (imageInstance) {\n\t\t\timageInstance.getCroppedCanvas().toBlob((blob: Blob) => {\n\t\t\t\tsetCroppedImage(URL.createObjectURL(blob));\n\t\t\t});\n\n\t\t\tsetImageSettings(imageInstance.getData({ rounded: true }));\n\n\t\t\tcloseImageCropper();\n\t\t}\n\t};\n\n\treturn (\n\t\t<Modal\n\t\t\tsize='xl'\n\t\t\tisOpen={showImageCropper}\n\t\t\tscrollBehavior='inside'\n\t\t\tonClose={closeImageCropper}>\n\t\t\t<ModalOverlay />\n\t\t\t<ModalContent>\n\t\t\t\t<Box>\n\t\t\t\t\t<ModalCloseButton />\n\n\t\t\t\t\t<Box h='100%' pt={12}>\n\t\t\t\t\t\t{showImageCropper && photo && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Cropper\n\t\t\t\t\t\t\t\t\tstyle={{ height: 400, width: '100%' }}\n\t\t\t\t\t\t\t\t\tsrc={photo}\n\t\t\t\t\t\t\t\t\taspectRatio={1 / 1}\n\t\t\t\t\t\t\t\t\tviewMode={1}\n\t\t\t\t\t\t\t\t\tguides={true}\n\t\t\t\t\t\t\t\t\tminCropBoxHeight={20}\n\t\t\t\t\t\t\t\t\tminCropBoxWidth={20}\n\t\t\t\t\t\t\t\t\tbackground={false}\n\t\t\t\t\t\t\t\t\tresponsive={true}\n\t\t\t\t\t\t\t\t\tautoCropArea={1}\n\t\t\t\t\t\t\t\t\tonInitialized={(instance) => {\n\t\t\t\t\t\t\t\t\t\tsetImageInstance(instance);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t{...imageSettings}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t</Box>\n\t\t\t\t\t<ModalFooter>\n\t\t\t\t\t\t<Button onClick={saveDetails}>Save</Button>\n\t\t\t\t\t</ModalFooter>\n\t\t\t\t</Box>\n\t\t\t</ModalContent>\n\t\t</Modal>\n\t);\n};\n\nexport default ImageCropper;\n"],"sourceRoot":""}