{"version":3,"sources":["app/hooks/useAlert.tsx","../../../src/grid.tsx","app/hooks/useCroppedImage.tsx","../../../src/Check.tsx","../../../src/Close.tsx","../../../src/array.ts","../../../src/assertion.ts","../../../src/object.ts","../../../src/responsive.ts","../../../src/create-media-query.ts","../../../src/use-breakpoint-value.ts","../../../src/use-breakpoint.ts","../../../src/media-query.utils.ts","../../../src/dom.ts","../../../src/skeleton.tsx","../../../src/simple-grid.tsx","../../../src/Edit.tsx","../../../src/react-helpers.ts","../../../src/function.ts","../../../src/use-tabs.ts","../../../src/tabs.tsx","../../../src/SmallAdd.tsx","app/pages/profile/profileStyles.ts","app/pages/profile/Profile.tsx"],"names":["useAlert","useDisclosure","isOpen","onOpen","onClose","useState","alertDetails","setAlertDetails","useEffect","timer","setTimeout","clearTimeout","setAlert","status","message","isAlertOpen","onAlertClose","Grid","forwardRef","templateColumns","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","ref","__css","spanFn","span","mapResponsive","value","GridItem","rowStart","filterUndefined","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","rowEnd","useCroppedImage","image","setImage","imageUrl","setImageUrl","imageSettings","setImageSettings","croppedImage","setCroppedImage","showImageCropper","closeImageCropper","openImageCropper","URL","createObjectURL","resetValues","CheckIcon","createIcon","viewBox","path","fill","points","CloseIcon","displayName","d","isCustomBreakpoint","maybeBreakpoint","Number","isArray","Array","fn","cache","memoize","key","index","obj","breakpoints","Object","createMediaQueries","a","b","next","arr","maxWidth","minWidth","breakpoint","query","parseInt","toMediaString","match","parseFloat","calculateMeasurement","subtract","createMediaQueryString","measurementRegex","isNumber","useBreakpointValue","defaultBreakpoint","useTheme","mediaQueries","base","mediaQuery","current","currentBreakpoint","update","setCurrentBreakpoint","React","listeners","window","handleChange","useBreakpoint","theme","defaultBreakPoints","values","stopIndex","getClosestValue","bps","result","arrayToObjectNotation","carry","cx","classNames","__DEV__","process","StyledSkeleton","chakra","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","fade","keyframes","from","opacity","to","Skeleton","useStyleConfig","isFirstRender","useIsFirstRender","omitThemingProps","className","_className","animation","fadeDuration","speed","SkeletonText","props","noOfLines","spacing","skeletonHeight","children","noOfLinesValue","numbers","getWidth","isLoaded","sizeProps","mb","number","width","height","startColor","endColor","SkeletonCircle","size","borderRadius","boxSize","SimpleGrid","count","minChildWidth","isNull","n","gap","columnGap","rowGap","EditIcon","stroke","strokeLinecap","strokeWidth","isFunction","isUndefined","assignRef","error","Error","mergeRefs","refs","callAllHandlers","fns","event","once","args","options","strict","errorMessage","name","Context","context","createContext","useTabPanels","useTabsContext","selectedIndex","child","getValidChildren","isSelected","id","makeTabPanelId","makeTabId","Tabs","useMultiStyleConfig","orientation","defaultIndex","useControllableState","defaultValue","onChange","propsMap","setFocusedIndex","enabledDomContext","useDescendants","domContext","useId","focusedIndex","setSelectedIndex","isManual","isLazy","htmlProps","useTabs","rootProps","keys","object","omit","root","Tab","useStyles","tabProps","isFocusable","enabledIndex","useDescendant","disabled","Boolean","focusable","element","clickableProps","useClickable","isDisabled","onClick","role","tabIndex","type","onFocus","undefined","useTab","tabStyles","outline","alignItems","justifyContent","TabList","tablistProps","setIndex","tab","onKeyDown","nextTab","prevTab","isHorizontal","isVertical","action","ArrowRight","ArrowLeft","ArrowDown","ArrowUp","Home","End","keyCode","normalizeEventKey","useTabList","tablistStyles","TabPanel","panelProps","hidden","useTabPanel","tabpanel","TabPanels","panelsProps","SmallAddIcon","fillRule","outerContainer","mx","lg","md","h","overflowY","innerContainer","py","sm","columns","justifyItems","iconbtn","bgGradient","pos","transition","_hover","_active","iconbtnDel","InputField","lazy","ImageCropper","BaseAlert","detailsSchema","Yup","shape","firstName","required","lastName","email","passwordSchema","currentPassword","password","min","passwordConfirm","when","is","val","length","then","oneOf","Profile","useContext","AuthContext","user","updateUser","colorMode","useColorMode","saveImageInit","setSaveImageInit","detailsInitialValues","middleName","savePhoto","data","FormData","append","JSON","stringify","axios","url","method","res","history","useHistory","fallback","photo","bgColor","p","textAlign","alignSelf","w","src","alt","padding","bg","mt","e","target","files","style","hasArrow","label","bottom","left","aria-label","icon","Close","right","Check","Edit","as","htmlFor","validationSchema","initialValues","onSubmit","setSubmitting","resetForm","trim","dirty","isValid","isSubmitting","Form","minH","autoComplete","isLoading","colorScheme","replace","response"],"mappings":"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","file":"static/js/21.51ef41f7.chunk.js","sourcesContent":["import { useDisclosure } from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { AlertProps } from '../config/types';\n\nconst useAlert = () => {\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\tconst [alertDetails, setAlertDetails] = useState<null | AlertProps>(null);\n\n\tuseEffect(() => {\n\t\tif (alertDetails) {\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tonClose();\n\t\t\t}, 2500);\n\n\t\t\treturn () => clearTimeout(timer);\n\t\t}\n\t}, [alertDetails, onClose]);\n\n\tconst setAlert = (\n\t\tstatus: 'error' | 'success' | 'info' | 'warning' = 'info',\n\t\tmessage: string\n\t) => {\n\t\tsetAlertDetails({\n\t\t\tstatus,\n\t\t\tmessage,\n\t\t});\n\t\tonOpen();\n\t};\n\n\treturn {\n\t\tsetAlert,\n\t\tisAlertOpen: isOpen,\n\t\tonAlertClose: onClose,\n\t\talertDetails: alertDetails,\n\t};\n};\n\nexport default useAlert;\n","import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">((props, ref) => {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">((props, ref) => {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n","import { useState, useEffect } from 'react';\nimport { useDisclosure } from '@chakra-ui/react';\n\nconst useCroppedImage = () => {\n\tconst [image, setImage] = useState<File | null>(null);\n\tconst [imageUrl, setImageUrl] = useState<any>(null);\n\tconst [imageSettings, setImageSettings] = useState({});\n\tconst [croppedImage, setCroppedImage] = useState<any>(null);\n\n\tconst {\n\t\tisOpen: showImageCropper,\n\t\tonClose: closeImageCropper,\n\t\tonOpen: openImageCropper,\n\t} = useDisclosure();\n\n\tuseEffect(() => {\n\t\tif (image) {\n\t\t\tsetImageUrl(URL.createObjectURL(image));\n\t\t\topenImageCropper();\n\t\t}\n\t}, [image, openImageCropper]);\n\n\tconst resetValues = () => {\n\t\tsetImage(null);\n\t\tsetImageUrl(null);\n\t\tsetCroppedImage(null);\n\t};\n\n\treturn {\n\t\timage,\n\t\tsetImage,\n\t\tshowImageCropper,\n\t\tcloseImageCropper,\n\t\timageSettings,\n\t\tsetImageSettings,\n\t\timageUrl,\n\t\tresetValues,\n\t\tsetImageUrl,\n\t\tsetCroppedImage,\n\t\tcroppedImage,\n\t\topenImageCropper,\n\t};\n};\n\nexport default useCroppedImage;\n","import { createIcon } from \"@chakra-ui/icon\"\nimport * as React from \"react\"\n\nexport const CheckIcon = createIcon({\n  viewBox: \"0 0 14 14\",\n  path: (\n    <g fill=\"currentColor\">\n      <polygon points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const CloseIcon = createIcon({\n  displayName: \"CloseIcon\",\n  d:\n    \"M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z\",\n})\n","export function getFirstItem<T>(array: T[]) {\n  return array != null && array.length ? array[0] : undefined\n}\n\nexport function getLastItem<T>(array: T[]) {\n  const length = array == null ? 0 : array.length\n  return length ? array[length - 1] : undefined\n}\n\nexport function getPrevItem<T>(index: number, array: T[], loop = true) {\n  const prevIndex = getPrevIndex(index, array.length, loop)\n  return array[prevIndex]\n}\n\nexport function getNextItem<T>(index: number, array: T[], loop = true) {\n  const nextIndex = getNextIndex(index, array.length, 1, loop)\n  return array[nextIndex]\n}\n\nexport function removeIndex<T>(array: T[], index: number) {\n  return array.filter((_, idx) => idx !== index)\n}\n\nexport function addItem<T>(array: T[], item: T) {\n  return [...array, item]\n}\n\nexport function removeItem<T>(array: T[], item: T) {\n  return array.filter((eachItem) => eachItem !== item)\n}\n\n/**\n * Get the next index based on the current index and step.\n *\n * @param currentIndex the current index\n * @param length the total length or count of items\n * @param step the number of steps\n * @param loop whether to circle back once `currentIndex` is at the start/end\n */\nexport function getNextIndex(\n  currentIndex: number,\n  length: number,\n  step = 1,\n  loop = true,\n) {\n  const lastIndex = length - 1\n\n  if (currentIndex === -1) {\n    return step > 0 ? 0 : lastIndex\n  }\n\n  const nextIndex = currentIndex + step\n\n  if (nextIndex < 0) {\n    return loop ? lastIndex : 0\n  }\n\n  if (nextIndex >= length) {\n    if (loop) return 0\n    return currentIndex > length ? length : currentIndex\n  }\n\n  return nextIndex\n}\n\n/**\n * Get's the previous index based on the current index.\n * Mostly used for keyboard navigation.\n *\n * @param index - the current index\n * @param count - the length or total count of items in the array\n * @param loop - whether we should circle back to the\n * first/last once `currentIndex` is at the start/end\n */\nexport function getPrevIndex(currentIndex: number, count: number, loop = true) {\n  return getNextIndex(currentIndex, count, -1, loop)\n}\n\n/**\n * Converts an array into smaller chunks or groups.\n *\n * @param array the array to chunk into group\n * @param size the length of each chunk\n */\nexport function chunk<T>(array: T[], size: number): T[][] {\n  return array.reduce((rows: T[][], currentValue: T, index: number) => {\n    if (index % size === 0) {\n      rows.push([currentValue])\n    } else {\n      rows[rows.length - 1].push(currentValue)\n    }\n    return rows\n  }, [] as T[][])\n}\n\n/**\n * Gets the next item based on a search string\n *\n * @param items array of items\n * @param searchString the search string\n * @param itemToString resolves an item to string\n * @param currentItem the current selected item\n */\nexport function getNextItemFromSearch<T>(\n  items: T[],\n  searchString: string,\n  itemToString: (item: T) => string,\n  currentItem: T,\n) {\n  if (searchString == null) {\n    return currentItem\n  }\n\n  // If current item doesn't exist, find the item that matches the search string\n  if (!currentItem) {\n    const foundItem = items.find((item) =>\n      itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n    )\n    return foundItem\n  }\n\n  // Filter items for ones that match the search string (case insensitive)\n  const matchingItems = items.filter((item) =>\n    itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n  )\n\n  // If there's a match, let's get the next item to select\n  if (matchingItems.length > 0) {\n    let nextIndex: number\n\n    // If the currentItem is in the available items, we move to the next available option\n    if (matchingItems.includes(currentItem)) {\n      const currentIndex = matchingItems.indexOf(currentItem)\n      nextIndex = currentIndex + 1\n      if (nextIndex === matchingItems.length) {\n        nextIndex = 0\n      }\n      return matchingItems[nextIndex]\n    }\n    // Else, we pick the first item in the available items\n    nextIndex = items.indexOf(matchingItems[0])\n    return items[nextIndex]\n  }\n\n  // a decent fallback to the currentItem\n  return currentItem\n}\n\n/**\n * since breakpoints are defined as custom properties on an array, you may\n * `Object.keys(theme.breakpoints)` to retrieve both regular numeric indices\n * and custom breakpoints as string.\n *\n * This function returns true given a custom array property.\n */\nexport const isCustomBreakpoint = (maybeBreakpoint: string) =>\n  Number.isNaN(Number(maybeBreakpoint))\n","import { ChangeEvent } from \"react\"\nimport { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport const isNotNumber = (value: any) =>\n  typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value)\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport const isEmptyArray = (value: any) => isArray(value) && value.length === 0\n\n// Function assertions\nexport function isFunction(value: any): value is Function {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport const isDefined = (value: any) =>\n  typeof value !== \"undefined\" && value !== undefined\n\nexport const isUndefined = (value: any): value is undefined =>\n  typeof value === \"undefined\" || value === undefined\n\n// Object assertions\nexport const isObject = (value: any): value is Dict => {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport const isEmptyObject = (value: any) =>\n  isObject(value) && Object.keys(value).length === 0\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport const isNull = (value: any): value is null => value == null\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\n// Event assertions\nexport function isInputEvent(value: any): value is ChangeEvent {\n  return value && isObject(value) && isObject(value.target)\n}\n\n// Empty assertions\nexport const isEmpty = (value: any) => {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n","import type { Dict, Omit } from \"./types\"\n\nexport { default as mergeWith } from \"lodash.mergewith\"\nexport { default as objectAssign } from \"object-assign\"\n\nexport function omit<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as K)) return\n    result[key] = object[key]\n  })\n\n  return result as Omit<T, K>\n}\n\nexport function pick<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result = {} as { [P in K]: T[P] }\n\n  keys.forEach((key) => {\n    if (key in object) {\n      result[key] = object[key]\n    }\n  })\n\n  return result\n}\n\nexport function split<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const picked: Dict = {}\n  const omitted: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as T[K])) {\n      picked[key] = object[key]\n    } else {\n      omitted[key] = object[key]\n    }\n  })\n\n  return [picked, omitted] as [{ [P in K]: T[P] }, Omit<T, K>]\n}\n\n/**\n * Get value from a deeply nested object using a string path.\n * Memoizes the value.\n * @param obj - the object\n * @param path - the string path\n * @param def  - the fallback value\n */\nexport function get(\n  obj: object,\n  path: string | number,\n  fallback?: any,\n  index?: number,\n) {\n  const key = typeof path === \"string\" ? path.split(\".\") : [path]\n\n  for (index = 0; index < key.length; index += 1) {\n    if (!obj) break\n    obj = obj[key[index]]\n  }\n\n  return obj === undefined ? fallback : obj\n}\n\ntype Get = (\n  obj: Readonly<object>,\n  path: string | number,\n  fallback?: any,\n  index?: number,\n) => any\n\nexport const memoize = (fn: Get) => {\n  const cache = new WeakMap()\n\n  const memoizedFn: Get = (obj, path, fallback, index) => {\n    if (typeof obj === \"undefined\") {\n      return fn(obj, path, fallback)\n    }\n\n    if (!cache.has(obj)) {\n      cache.set(obj, new Map())\n    }\n\n    const map = cache.get(obj)\n\n    if (map.has(path)) {\n      return map.get(path)\n    }\n\n    const value = fn(obj, path, fallback, index)\n\n    map.set(path, value)\n\n    return value\n  }\n\n  return memoizedFn\n}\n\nexport const memoizedGet = memoize(get)\n\n/**\n * Get value from deeply nested object, based on path\n * It returns the path value if not found in object\n *\n * @param path - the string path or value\n * @param scale - the string path or value\n */\nexport function getWithDefault(path: any, scale: any) {\n  return memoizedGet(scale, path, path)\n}\n\ntype FilterFn<T> = (value: any, key: string, object: T) => boolean\n\n/**\n * Returns the items of an object that meet the condition specified in a callback function.\n *\n * @param object the object to loop through\n * @param fn The filter function\n */\nexport function objectFilter<T extends Dict>(object: T, fn: FilterFn<T>) {\n  const result: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    const value = object[key]\n    const shouldPass = fn(value, key, object)\n    if (shouldPass) {\n      result[key] = value\n    }\n  })\n\n  return result\n}\n\nexport const filterUndefined = (object: Dict) =>\n  objectFilter(object, (val) => val !== null && val !== undefined)\n\nexport const objectKeys = <T extends Dict>(obj: T) =>\n  (Object.keys(obj) as unknown) as (keyof T)[]\n\n/**\n * Object.entries polyfill for Nodev10 compatibility\n */\nexport const fromEntries = <T extends unknown>(entries: [string, any][]) =>\n  entries.reduce((carry, [key, value]) => {\n    carry[key] = value\n    return carry\n  }, {}) as T\n","import { isArray, isObject } from \"./assertion\"\nimport { Dict } from \"./types\"\nimport { objectKeys } from \"./object\"\nimport { getLastItem } from \"./array\"\n\nexport const breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n","import { isNumber, isCustomBreakpoint, StringOrNumber } from \"@chakra-ui/utils\"\n\nexport default function createMediaQueries(\n  breakpoints: string[],\n): MediaQuery[] {\n  return (\n    Object.entries(breakpoints)\n      .filter(([key]) => isCustomBreakpoint(key))\n      // sort css units in ascending order to ensure media queries are generated\n      // in the correct order and reference to each other correctly aswell\n      .sort((a, b) =>\n        Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1,\n      )\n      .map(([breakpoint, minWidth], index, arr) => {\n        // given a following breakpoint\n        const next = arr[index + 1]\n        // this breakpoint must end prior the threshold of the next\n        const maxWidth = next ? next[1] : undefined\n        const query = createMediaQueryString(minWidth, maxWidth)\n\n        return {\n          minWidth,\n          maxWidth,\n          breakpoint,\n          query,\n        }\n      })\n  )\n}\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueryString(minWidth: string, maxWidth?: string) {\n  const hasMinWidth = parseInt(minWidth, 10) >= 0\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\"\n  }\n\n  let query = `(min-width: ${toMediaString(minWidth)})`\n\n  if (!maxWidth) {\n    return query\n  }\n\n  if (query) {\n    query += \" and \"\n  }\n\n  query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n\n  return query\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nconst measurementRegex = /(\\d+\\.?\\d*)/u\n\nconst calculateMeasurement = (\n  value: StringOrNumber,\n  modifier: number,\n): string => {\n  if (typeof value === \"number\") {\n    return `${value + modifier}`\n  }\n\n  return value.replace(\n    measurementRegex,\n    (match) => `${parseFloat(match) + modifier}`,\n  )\n}\n\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\nfunction subtract(value: string) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: StringOrNumber) {\n  return isNumber(value) ? `${value}px` : value\n}\n","import { useTheme } from \"@chakra-ui/system\"\nimport {\n  arrayToObjectNotation,\n  fromEntries,\n  isArray,\n  isCustomBreakpoint,\n} from \"@chakra-ui/utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\nexport function useBreakpointValue<T = any>(\n  values: Record<string, T> | T[],\n): T | undefined {\n  const breakpoint = useBreakpoint()\n  const theme = useTheme()\n\n  if (!breakpoint) return undefined\n\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Object.keys(theme.breakpoints).filter(isCustomBreakpoint)\n\n  const obj = isArray(values)\n    ? fromEntries<Record<string, T>>(\n        Object.entries(\n          arrayToObjectNotation(values, breakpoints),\n        ).map(([key, value]) => [key, value]),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n","import { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update])\n\n  return current\n}\n","import { breakpoints as defaultBreakPoints } from \"@chakra-ui/utils\"\n\nexport function getClosestValue<T = any>(\n  values: Record<string, T>,\n  breakpoint: string,\n  breakpoints = defaultBreakPoints,\n) {\n  let index = Object.keys(values).indexOf(breakpoint)\n\n  if (index !== -1) {\n    return values[breakpoint]\n  }\n\n  let stopIndex = breakpoints.indexOf(breakpoint)\n\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex]\n\n    if (values[key] != null) {\n      index = stopIndex\n      break\n    }\n    stopIndex -= 1\n  }\n\n  if (index !== -1) {\n    const key = breakpoints[index]\n    return values[key]\n  }\n\n  return undefined\n}\n","import * as React from \"react\"\nimport { Booleanish, EventKeys } from \"./types\"\n\nexport function getOwnerWindow(node?: HTMLElement | null) {\n  return node instanceof Element\n    ? getOwnerDocument(node).defaultView ?? window\n    : window\n}\n\nexport function getOwnerDocument(node?: HTMLElement | null) {\n  return node instanceof Element ? node.ownerDocument ?? document : document\n}\n\nexport function canUseDOM() {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.document &&\n    window.document.createElement\n  )\n}\n\nexport const isBrowser = canUseDOM()\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nexport function normalizeEventKey(event: React.KeyboardEvent) {\n  const { key, keyCode } = event\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0\n\n  const eventKey = isArrowKey ? `Arrow${key}` : key\n\n  return eventKey as EventKeys\n}\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? \"\" : undefined) as Booleanish\n\nexport const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined\n\nexport const cx = (...classNames: any[]) => classNames.filter(Boolean).join(\" \")\n\nexport function getActiveElement(node?: HTMLElement) {\n  const doc = getOwnerDocument(node)\n  return doc?.activeElement as HTMLElement\n}\n\nexport function contains(parent: HTMLElement, child: HTMLElement) {\n  return parent === child || parent.contains(child)\n}\n","import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   * @default\n   * 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds\n   *\n   * @default\n   * 0.4\n   */\n  fadeDuration?: number\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst useIsFirstRender = () => {\n  const isFirstRender = React.useRef(true)\n\n  React.useEffect(() => {\n    isFirstRender.current = false\n  }, [])\n\n  return isFirstRender.current\n}\n\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  if (isLoaded) {\n    const animation = isFirstRender ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton ref={ref} className={_className} {...rest} __css={styles} />\n  )\n})\n\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8,\n}\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\"\n}\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\n\nconst defaultNoOfLines = 3\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\"\n}\n\nexport const SkeletonCircle: React.FC<SkeletonProps> = ({\n  size = \"2rem\",\n  ...rest\n}) => <Skeleton borderRadius=\"full\" boxSize={size} {...rest} />\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\"\n}\n","import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">((props, ref) => {\n  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props\n\n  const templateColumns = minChildWidth\n    ? widthToColumns(minChildWidth)\n    : countToColumns(columns)\n\n  return (\n    <Grid\n      ref={ref}\n      gap={spacing}\n      columnGap={spacingX}\n      rowGap={spacingY}\n      templateColumns={templateColumns}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, 1fr)`,\n  )\n}\n","import { createIcon } from \"@chakra-ui/icon\"\nimport * as React from \"react\"\n\nexport const EditIcon = createIcon({\n  displayName: \"EditIcon\",\n  path: (\n    <g fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeWidth=\"2\">\n      <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n      <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\n    </g>\n  ),\n})\n","import * as React from \"react\"\nimport { isFunction } from \"./assertion\"\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  /**\n   * Error message to throw if the context is `undefined`\n   */\n  errorMessage?: string\n  /**\n   * The display name of the context\n   */\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext<ContextType>(options: CreateContextOptions = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n\n    if (!context && strict) {\n      throw new Error(errorMessage)\n    }\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport function getValidChildren(children: React.ReactNode) {\n  return React.Children.toArray(children).filter((child) =>\n    React.isValidElement(child),\n  ) as React.ReactElement[]\n}\n\ntype ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (isFunction(ref)) {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\nexport function mergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return (value: T) => {\n    refs.forEach((ref) => assignRef(ref, value))\n  }\n}\n","import { isFunction, __DEV__ } from \"./assertion\"\nimport { AnyFunction, FunctionArguments } from \"./types\"\n\nexport function runIfFn<T, U>(\n  valueOrFn: T | ((...fnArgs: U[]) => T),\n  ...args: U[]\n): T {\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n\nexport function callAllHandlers<T extends (event: any) => void>(\n  ...fns: (T | undefined)[]\n) {\n  return function func(event: FunctionArguments<T>[0]) {\n    fns.some((fn) => {\n      fn?.(event)\n      return event?.defaultPrevented\n    })\n  }\n}\n\nexport function callAll<T extends AnyFunction>(...fns: (T | undefined)[]) {\n  return function mergedFn(arg: FunctionArguments<T>[0]) {\n    fns.forEach((fn) => {\n      fn?.(arg)\n    })\n  }\n}\n\nexport const compose = <T>(\n  fn1: (...args: T[]) => T,\n  ...fns: Array<(...args: T[]) => T>\n) => fns.reduce((f1, f2) => (...args) => f1(f2(...args)), fn1)\n\nexport function once(fn?: Function | null) {\n  let result: any\n\n  return function func(this: any, ...args: any[]) {\n    if (fn) {\n      result = fn.apply(this, args)\n      fn = null\n    }\n\n    return result\n  }\n}\n\nexport const noop = () => {}\n\ntype MessageOptions = {\n  condition: boolean\n  message: string\n}\n\nexport const warn = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.warn(message)\n  }\n})\n\nexport const error = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.error(message)\n  }\n})\n","import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  createContext,\n  Dict,\n  EventKeyMap,\n  getValidChildren,\n  isUndefined,\n  mergeRefs,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance 🚀:\n   * If `true`, the TabPanel rendering will be deferred\n   * until it is open.\n   */\n  isLazy?: boolean\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    orientation = \"horizontal\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = React.useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n      onChange: \"onChange\",\n    },\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  React.useEffect(() => {\n    if (!isUndefined(index)) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   *\n   * This manager is used to store only the tab nodes that are not disabled, and focusable.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\" and \"Tab 3\", since `Tab 2` is disabled\n   */\n  const enabledDomContext = useDescendants()\n\n  /**\n   * This manager is used to store all tab nodes whether disabled or not.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\", \"Tab 2\" \"Tab 3\".\n   *\n   * We need this for correct indexing of tabs in event a tab is disabled\n   */\n  const domContext = useDescendants()\n\n  /**\n   * generate a unique id or use user-provided id for\n   * the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    orientation,\n    enabledDomContext,\n    domContext,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<ReturnType<typeof useTabs>, \"htmlProps\">\n\nconst [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\nexport { TabsProvider }\n\ntype Child = React.ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: React.ReactNode\n  onKeyDown?: React.KeyboardEventHandler\n  ref?: React.Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    orientation,\n    enabledDomContext,\n  } = useTabsContext()\n\n  const count = enabledDomContext.descendants.length\n\n  /**\n   * Function to update the selected tab index\n   */\n  const setIndex = React.useCallback(\n    (index: number) => {\n      const tab = enabledDomContext.descendants[index]\n      if (tab?.element) {\n        tab.element.focus()\n        setFocusedIndex(index)\n      }\n    },\n    [enabledDomContext.descendants, setFocusedIndex],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => setIndex((focusedIndex + 1) % count)\n      const prevTab = () => setIndex((focusedIndex - 1 + count) % count)\n      const firstTab = () => setIndex(0)\n      const lastTab = () => setIndex(count - 1)\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => isHorizontal && nextTab(),\n        ArrowLeft: () => isHorizontal && prevTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [count, focusedIndex, orientation, setIndex],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   */\n  isDisabled?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(props: P) {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    enabledDomContext,\n    domContext,\n    selectedIndex,\n  } = useTabsContext()\n\n  const ref = React.useRef<HTMLElement>(null)\n\n  /**\n   * Think of `useDescendant` as the function that registers tab node\n   * to the `enabledDomContext`, and returns its index.\n   *\n   * Tab is registered if it is enabled or focusable\n   */\n  const enabledIndex = useDescendant({\n    disabled: Boolean(isDisabled),\n    focusable: Boolean(isFocusable),\n    context: enabledDomContext,\n    element: ref.current,\n  })\n\n  /**\n   * Registers all tabs (whether disabled or not)\n   */\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setFocusedIndex(enabledIndex)\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickableProps = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(ref, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickableProps,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: React.ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    React.cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n      /**\n       * Refers to the associated tab element, and also provides an accessible name to the tab panel.\n       */\n      \"aria-labelledby\": makeTabId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, children, ...htmlProps } = props\n  const { isLazy } = useTabsContext()\n\n  return {\n    /**\n     * Puts the tabpanel in the page `Tab` sequence.\n     */\n    tabIndex: 0,\n    ...htmlProps,\n    children: !isLazy || isSelected ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): React.CSSProperties {\n  const context = useTabsContext()\n\n  const { selectedIndex, orientation, domContext } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = React.useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined\n\n    const tab = domContext.descendants[selectedIndex]\n    const tabRect = tab?.element?.getBoundingClientRect()\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal && tabRect) {\n      const { left, width } = tabRect\n      setRect({ left, width })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical && tabRect) {\n      const { top, height } = tabRect\n      setRect({ top, height })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const id = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, domContext.descendants])\n\n  return {\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  UseTabListProps,\n  UseTabOptions,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  UseTabsProps,\n} from \"./use-tabs\"\n\ninterface TabsOptions {\n  /**\n   * If `true`, tabs will stretch to width of the tablist.\n   */\n  isFitted?: boolean\n  /**\n   * The alignment of the tabs\n   */\n  align?: \"start\" | \"end\" | \"center\"\n}\n\nexport interface TabsProps\n  extends UseTabsProps,\n    ThemingProps,\n    Omit<HTMLChakraProps<\"div\">, \"onChange\">,\n    TabsOptions {\n  children: React.ReactNode\n}\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components. It doesn't render\n * any DOM node.\n */\nexport const Tabs = forwardRef<TabsProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tabs\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const { htmlProps, ...ctx } = useTabs(rest)\n  const context = React.useMemo(() => ctx, [ctx])\n\n  const rootProps = omit(htmlProps as any, [\"isFitted\"])\n\n  return (\n    <TabsProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          className={cx(\"chakra-tabs\", className)}\n          ref={ref}\n          {...rootProps}\n          __css={styles.root}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </TabsProvider>\n  )\n})\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\"\n}\n\nexport interface TabProps extends UseTabOptions, HTMLChakraProps<\"button\"> {}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport const Tab = forwardRef<TabProps, \"button\">((props, ref) => {\n  const styles = useStyles()\n  const tabProps = useTab({ ...props, ref })\n\n  const tabStyles: SystemStyleObject = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab,\n  }\n\n  return (\n    <chakra.button\n      {...tabProps}\n      className={cx(\"chakra-tabs__tab\", props.className)}\n      __css={tabStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\"\n}\n\nexport interface TabListProps\n  extends UseTabListProps,\n    Omit<HTMLChakraProps<\"div\">, \"onKeyDown\" | \"ref\"> {}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport const TabList = forwardRef<TabListProps, \"div\">((props, ref) => {\n  const tablistProps = useTabList({ ...props, ref })\n\n  const styles = useStyles()\n\n  const tablistStyles: SystemStyleObject = {\n    display: \"flex\",\n    ...styles.tablist,\n  }\n\n  return (\n    <chakra.div\n      {...tablistProps}\n      className={cx(\"chakra-tabs__tablist\", props.className)}\n      __css={tablistStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\"\n}\n\nexport interface TabPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport const TabPanel = forwardRef<TabPanelProps, \"div\">((props, ref) => {\n  const panelProps = useTabPanel({ ...props, ref })\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      outline=\"0\"\n      {...panelProps}\n      className={cx(\"chakra-tabs__tab-panel\", props.className)}\n      __css={styles.tabpanel}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\"\n}\n\nexport interface TabPanelsProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">((props, ref) => {\n  const panelsProps = useTabPanels(props)\n  return (\n    <chakra.div\n      {...panelsProps}\n      width=\"100%\"\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\"\n}\n\nexport interface TabIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  (props, ref) => {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\"\n}\n","import { createIcon } from \"@chakra-ui/icon\"\nimport * as React from \"react\"\n\nexport const SmallAddIcon = createIcon({\n  displayName: \"SmallAddIcon\",\n  viewBox: \"0 0 20 20\",\n  path: (\n    <path\n      fill=\"currentColor\"\n      d=\"M14 9h-3V6c0-.55-.45-1-1-1s-1 .45-1 1v3H6c-.55 0-1 .45-1 1s.45 1 1 1h3v3c0 .55.45 1 1 1s1-.45 1-1v-3h3c.55 0 1-.45 1-1s-.45-1-1-1z\"\n      fillRule=\"evenodd\"\n    />\n  ),\n})\n","const styles = {\n\touterContainer: {\n\t\tmx: {\n\t\t\tlg: 10,\n\t\t\tmd: 4,\n\t\t},\n\n\t\th: '90vh',\n\t\toverflowY: 'scroll' as any,\n\t},\n\t// simple grid\n\tinnerContainer: {\n\t\tpy: 10,\n\t\trowGap: {\n\t\t\tsm: 10,\n\t\t\tmd: 0,\n\t\t},\n\t\th: { lg: '65vh', sm: 'auto' },\n\t\tcolumns: {\n\t\t\tlg: 2,\n\t\t\tmd: 1,\n\t\t},\n\t\tjustifyItems: 'center',\n\t},\n\ticonbtn: {\n\t\tcursor: 'pointer' as any,\n\t\tbgGradient: 'linear(primary.600, secondary.400)',\n\t\tpos: 'absolute' as any,\n\t\tborderRadius: '50%',\n\t\ttransition: 'all .3s ease-out',\n\t\t_hover: {\n\t\t\tbgGradient: 'linear(secondary.400, primary.500)',\n\t\t},\n\t\t_active: {\n\t\t\tbgGradient: 'linear(secondary.400, primary.500)',\n\t\t},\n\t},\n\ticonbtnDel: {\n\t\tcursor: 'pointer' as any,\n\t\tbgGradient: 'linear(red.600, red.400)',\n\t\tpos: 'absolute' as any,\n\t\tborderRadius: '50%',\n\t\ttransition: 'all .3s ease-out',\n\t\t_hover: {\n\t\t\tbgGradient: 'linear(red.400, red.500)',\n\t\t},\n\t\t_active: {\n\t\t\tbgGradient: 'linear(red.400, red.500)',\n\t\t},\n\t},\n};\n\nexport default styles;\n","import React, { Suspense, useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { Form, Formik } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport {\n\tBox,\n\tIconButton,\n\tSimpleGrid,\n\tTooltip,\n\tuseColorMode,\n\tHeading,\n\tButton,\n\tButtonGroup,\n\tTabs,\n\tTabList,\n\tTab,\n\tSkeletonText,\n\tSkeletonCircle,\n\tTabPanels,\n\tTabPanel,\n\tAvatar,\n} from '@chakra-ui/react';\n\nimport { SmallAddIcon, EditIcon, CheckIcon, CloseIcon } from '@chakra-ui/icons';\n\nimport useCroppedImage from '../../hooks/useCroppedImage';\nimport useAlert from '../../hooks/useAlert';\n\nimport { AuthContext } from '../../store/context/AuthContext';\n\nimport Loader from '../../components/Spinner/Spinner';\n\nimport styles from './profileStyles';\n\nconst InputField = React.lazy(() => import('../../components/Form/InputField'));\nconst ImageCropper = React.lazy(\n\t() => import('../../components/ImageCropper/ImageCropper')\n);\nconst BaseAlert = React.lazy(() => import('../../components/Alert/BaseAlert'));\n\nconst detailsSchema = Yup.object().shape({\n\tfirstName: Yup.string().required('Please provide your firstname'),\n\tlastName: Yup.string().required('Please provide your lastname'),\n\temail: Yup.string()\n\t\t.email('Please provide a valid email')\n\t\t.required('Please provide your email'),\n});\n\nconst passwordSchema = Yup.object().shape({\n\tcurrentPassword: Yup.string().required('provide your current password'),\n\tpassword: Yup.string()\n\t\t.min(6, 'Password should atleast contain a minimum of 6 characters')\n\t\t.required('Please protect your account with a password'),\n\tpasswordConfirm: Yup.string()\n\t\t.when('password', {\n\t\t\tis: (val: string) => (val && val.length > 0 ? true : false),\n\t\t\tthen: Yup.string().oneOf([Yup.ref('password')], 'passwords do not match'),\n\t\t})\n\t\t.required('Confirm your password'),\n});\n\nconst Profile = () => {\n\tconst { user, updateUser } = useContext(AuthContext);\n\tconst { colorMode } = useColorMode();\n\tconst {\n\t\timage,\n\t\tsetImage,\n\t\tshowImageCropper,\n\t\tcloseImageCropper,\n\t\timageSettings,\n\t\tsetImageSettings,\n\t\timageUrl,\n\t\tsetCroppedImage,\n\t\tcroppedImage,\n\t\topenImageCropper,\n\t\tresetValues,\n\t} = useCroppedImage();\n\tconst [saveImageInit, setSaveImageInit] = useState(false);\n\n\tconst detailsInitialValues = {\n\t\tfirstName: user.firstName,\n\t\tmiddleName: user.middleName || '',\n\t\tlastName: user.lastName,\n\t\temail: user.email,\n\t};\n\n\tconst passwordInitialValues = {\n\t\tcurrentPassword: '',\n\t\tpassword: '',\n\t\tpasswordConfirm: '',\n\t};\n\n\tconst savePhoto = async () => {\n\t\tsetSaveImageInit(true);\n\t\tconst data = new FormData();\n\t\tdata.append('photo', image!);\n\t\tdata.append('imageSettings', JSON.stringify(imageSettings!));\n\n\t\ttry {\n\t\t\tconst res = await axios({\n\t\t\t\turl: '/api/v1/users/updateSettings',\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\tdata,\n\t\t\t});\n\n\t\t\tupdateUser(res.data.user);\n\t\t\tresetValues();\n\t\t} catch (err) {}\n\t\tsetSaveImageInit(false);\n\t};\n\n\tconst { setAlert, isAlertOpen, alertDetails } = useAlert();\n\n\tconst history = useHistory();\n\n\treturn (\n\t\t<Suspense fallback={<Loader />}>\n\t\t\t{isAlertOpen && <BaseAlert alertDetails={alertDetails} />}\n\t\t\t{image && imageUrl && (\n\t\t\t\t<ImageCropper\n\t\t\t\t\tshowImageCropper={showImageCropper}\n\t\t\t\t\tcloseImageCropper={closeImageCropper}\n\t\t\t\t\timageSettings={imageSettings}\n\t\t\t\t\tsetImageSettings={setImageSettings}\n\t\t\t\t\tphoto={imageUrl}\n\t\t\t\t\tsetCroppedImage={setCroppedImage}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<Box\n\t\t\t\tbgColor={colorMode === 'light' ? 'secondary.100' : 'gray.700'}\n\t\t\t\t{...styles.outerContainer}\n\t\t\t\tclassName='hide-scrollbar'\n\t\t\t\tp={5}>\n\t\t\t\t<Box mb={{ lg: 20, sm: 2 }} textAlign='center'>\n\t\t\t\t\t<Heading>My Profile</Heading>\n\t\t\t\t</Box>\n\t\t\t\t<SimpleGrid {...styles.innerContainer}>\n\t\t\t\t\t<Box alignSelf='center' w='max-content' pos='relative'>\n\t\t\t\t\t\t{!saveImageInit && (\n\t\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t\t\tborderRadius='0'\n\t\t\t\t\t\t\t\tboxSize={{\n\t\t\t\t\t\t\t\t\tmd: '400px',\n\t\t\t\t\t\t\t\t\tsm: '300px',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tsrc={croppedImage || (user && user.photo?.url)}\n\t\t\t\t\t\t\t\talt={user && user.firstName}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{saveImageInit && (\n\t\t\t\t\t\t\t<Box boxSize='400px' padding='6' boxShadow='lg' bg='white'>\n\t\t\t\t\t\t\t\t<SkeletonCircle size='10' />\n\t\t\t\t\t\t\t\t<SkeletonText mt='4' noOfLines={8} spacing='4' />\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tonChange={(e: any) => setImage(e.target.files[0])}\n\t\t\t\t\t\t\ttype='file'\n\t\t\t\t\t\t\tname='image-upload'\n\t\t\t\t\t\t\tid='image-upload'\n\t\t\t\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{!saveImageInit && (\n\t\t\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t\t\t{image && (\n\t\t\t\t\t\t\t\t\t<Tooltip hasArrow label='Remove Changes'>\n\t\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\t\tbottom='20px'\n\t\t\t\t\t\t\t\t\t\t\tleft='10px'\n\t\t\t\t\t\t\t\t\t\t\tonClick={resetValues}\n\t\t\t\t\t\t\t\t\t\t\t{...styles.iconbtnDel}\n\t\t\t\t\t\t\t\t\t\t\taria-label='revert changes'\n\t\t\t\t\t\t\t\t\t\t\ticon={<CloseIcon color='#fff' />}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t{image && (\n\t\t\t\t\t\t\t\t\t<Tooltip hasArrow label='Save Photo'>\n\t\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\t\tbottom='20px'\n\t\t\t\t\t\t\t\t\t\t\tright='100px'\n\t\t\t\t\t\t\t\t\t\t\tonClick={savePhoto}\n\t\t\t\t\t\t\t\t\t\t\t{...styles.iconbtn}\n\t\t\t\t\t\t\t\t\t\t\taria-label='save photo'\n\t\t\t\t\t\t\t\t\t\t\ticon={<CheckIcon color='#fff' />}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t{image && (\n\t\t\t\t\t\t\t\t\t<Tooltip hasArrow label='Edit Photo'>\n\t\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\t\tbottom='20px'\n\t\t\t\t\t\t\t\t\t\t\tright='55px'\n\t\t\t\t\t\t\t\t\t\t\tonClick={openImageCropper}\n\t\t\t\t\t\t\t\t\t\t\t{...styles.iconbtn}\n\t\t\t\t\t\t\t\t\t\t\taria-label='edit photo'\n\t\t\t\t\t\t\t\t\t\t\ticon={<EditIcon color='#fff' />}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t<Tooltip hasArrow label='Change Photo'>\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\tbottom='20px'\n\t\t\t\t\t\t\t\t\t\tright='10px'\n\t\t\t\t\t\t\t\t\t\tas='label'\n\t\t\t\t\t\t\t\t\t\thtmlFor='image-upload'\n\t\t\t\t\t\t\t\t\t\t{...styles.iconbtn}\n\t\t\t\t\t\t\t\t\t\taria-label='change photo'\n\t\t\t\t\t\t\t\t\t\ticon={<SmallAddIcon color='#fff' />}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Box alignSelf='center' w='100%'>\n\t\t\t\t\t\t<Tabs>\n\t\t\t\t\t\t\t<TabList>\n\t\t\t\t\t\t\t\t<Tab>Update Settings</Tab>\n\t\t\t\t\t\t\t\t<Tab>Update Password</Tab>\n\t\t\t\t\t\t\t</TabList>\n\n\t\t\t\t\t\t\t<TabPanels>\n\t\t\t\t\t\t\t\t<TabPanel>\n\t\t\t\t\t\t\t\t\t<Formik\n\t\t\t\t\t\t\t\t\t\tvalidationSchema={detailsSchema}\n\t\t\t\t\t\t\t\t\t\tinitialValues={detailsInitialValues}\n\t\t\t\t\t\t\t\t\t\tonSubmit={async (values, { setSubmitting, resetForm }) => {\n\t\t\t\t\t\t\t\t\t\t\tconst { firstName, middleName, lastName, email } = values;\n\t\t\t\t\t\t\t\t\t\t\tconst data = new FormData();\n\t\t\t\t\t\t\t\t\t\t\tdata.append('firstName', firstName);\n\t\t\t\t\t\t\t\t\t\t\tif (middleName && middleName.trim() !== '') {\n\t\t\t\t\t\t\t\t\t\t\t\tdata.append('middleName', middleName);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tdata.append('lastName', lastName);\n\t\t\t\t\t\t\t\t\t\t\tdata.append('email', email);\n\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tconst res = await axios({\n\t\t\t\t\t\t\t\t\t\t\t\t\turl: '/api/v1/users/updateSettings',\n\t\t\t\t\t\t\t\t\t\t\t\t\tmethod: 'PATCH',\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tupdateUser(res.data.user);\n\t\t\t\t\t\t\t\t\t\t\t\tconst values = {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfirstName: res.data.user.firstName,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmiddleName: res.data.user.middleName || '',\n\t\t\t\t\t\t\t\t\t\t\t\t\tlastName: res.data.user.lastName,\n\t\t\t\t\t\t\t\t\t\t\t\t\temail: res.data.user.email,\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\t\tresetValues();\n\t\t\t\t\t\t\t\t\t\t\t\tresetForm({ values });\n\t\t\t\t\t\t\t\t\t\t\t\tsetAlert('success', 'user details updated succesfully');\n\t\t\t\t\t\t\t\t\t\t\t\tsetSubmitting(false);\n\t\t\t\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t\t\t\tsetAlert('error', 'could not update user details');\n\t\t\t\t\t\t\t\t\t\t\t\tsetSubmitting(false);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t{({ dirty, isValid, isSubmitting }) => (\n\t\t\t\t\t\t\t\t\t\t\t<Box as={Form} minH='400px' autoComplete='off'>\n\t\t\t\t\t\t\t\t\t\t\t\t<InputField name='firstName' label='firstName' />\n\t\t\t\t\t\t\t\t\t\t\t\t<InputField\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname='middleName'\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel='middleName'\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<InputField name='lastName' label='lastName' />\n\t\t\t\t\t\t\t\t\t\t\t\t<InputField name='email' label='Email' />\n\t\t\t\t\t\t\t\t\t\t\t\t{isValid && dirty && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolorScheme='primary'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</Formik>\n\t\t\t\t\t\t\t\t</TabPanel>\n\t\t\t\t\t\t\t\t<TabPanel>\n\t\t\t\t\t\t\t\t\t<Formik\n\t\t\t\t\t\t\t\t\t\tvalidationSchema={passwordSchema}\n\t\t\t\t\t\t\t\t\t\tinitialValues={passwordInitialValues}\n\t\t\t\t\t\t\t\t\t\tonSubmit={async (values, { setSubmitting, resetForm }) => {\n\t\t\t\t\t\t\t\t\t\t\tconst data = { ...values };\n\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tawait axios({\n\t\t\t\t\t\t\t\t\t\t\t\t\turl: '/api/v1/users/updateCurrentUserPassword',\n\t\t\t\t\t\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tresetForm();\n\t\t\t\t\t\t\t\t\t\t\t\tsetAlert(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'success',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'user password updated succesfully. You will be logged out...'\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tsetSubmitting(false);\n\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\thistory.replace('/auth/logout');\n\t\t\t\t\t\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t\t\t\tsetAlert('error', err.response.data.message);\n\t\t\t\t\t\t\t\t\t\t\t\tsetSubmitting(false);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t{({ dirty, isValid, isSubmitting }) => (\n\t\t\t\t\t\t\t\t\t\t\t<Box minH='400px' as={Form} autoComplete='off'>\n\t\t\t\t\t\t\t\t\t\t\t\t<InputField\n\t\t\t\t\t\t\t\t\t\t\t\t\tname='currentPassword'\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel='Current Password'\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<InputField\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\t\t\t\t\tname='password'\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel='New Password'\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<InputField\n\t\t\t\t\t\t\t\t\t\t\t\t\tname='passwordConfirm'\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel='Password Confirm'\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={(!dirty && isValid) || (dirty && !isValid)}\n\t\t\t\t\t\t\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolorScheme='primary'>\n\t\t\t\t\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</Formik>\n\t\t\t\t\t\t\t\t</TabPanel>\n\t\t\t\t\t\t\t</TabPanels>\n\t\t\t\t\t\t</Tabs>\n\t\t\t\t\t</Box>\n\t\t\t\t</SimpleGrid>\n\t\t\t</Box>\n\t\t</Suspense>\n\t);\n};\n\nexport default Profile;\n"],"sourceRoot":""}