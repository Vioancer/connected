{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../../../src/use-callback-ref.ts","../../../src/portal.tsx","../../../src/grid.tsx","../../../src/use-force-update.ts","../../../src/use-unmount-effect.ts","../../../src/heading.tsx","../../../src/responsive.ts","../../../src/simple-grid.tsx","app/pages/notifications/Notifications.tsx"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","useCallbackRef","ref","React","useSafeLayoutEffect","args","createContext","strict","name","Container","zIndex","className","style","display","position","Portal","tempNode","portal","forceUpdate","useForceUpdate","getContainer","onMount","onUnmount","parentPortal","usePortalContext","manager","usePortalManager","doc","host","portalNode","childrenToRender","createPortal","value","current","Grid","forwardRef","templateColumns","styles","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","__css","spanFn","span","mapResponsive","GridItem","rowStart","filterUndefined","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","rowEnd","fn","unloadingRef","deps","setCount","count","Heading","useStyleConfig","rest","omitThemingProps","cx","prop","isArray","item","mapper","isObject","object","result","SimpleGrid","width","minChildWidth","isNull","n","isNumber","gap","columnGap","rowGap","FriendReqNotification","lazy","GroupReqNotification","PostNotification","Notifications","useContext","UIContext","isNotificationsOpen","onNotificationsClose","notifications","NotificationContext","fallback","size","scrollBehavior","isOpen","onClose","overflowY","minHeight","color","columns","sm","lg","spacing","map","notification","type","_id"],"mappings":"uGAAe,SAASA,EAAgBC,EAAUC,GAChD,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCAFxB,mC,iCCAA,SAASC,EAAkBC,EAAQC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAInC,SAASO,EAAad,EAAae,EAAYC,GAG5D,OAFID,GAAYb,EAAkBF,EAAYiB,UAAWF,GACrDC,GAAad,EAAkBF,EAAagB,GACzChB,EAbT,mC,iCCAA,qDASO,SAASkB,EAAT,GAGL,IAAMC,EAAMC,SAAZ,GAOA,OALAC,aAAoB,WAClBF,eAIK,eAAmB,sCAAIG,EAAJ,yBAAIA,EAAJ,6BAAaH,EAAb,eAAaA,kBAAb,KAA1B,M,mJCPgDI,YAA6B,CAC7EC,QAD6E,EAE7EC,KAAM,kB,mBAFF,E,KAAA,E,KAKAC,EAA4CtB,YAAU,IACpD,EAAN,EAAM,SAAYuB,EAAlB,EAAkBA,OAClB,OACE,uBACEC,UADF,uBAEEC,MAAO,CAAEC,QAAF,eAA2BC,SAA3B,WAAiDJ,WAH5D,IAuCK,SAASK,EAAO5B,GACrB,IAAM6B,EAAWb,SAAjB,MACMc,EAASd,SAAf,MAEMe,EAAcC,cAEdC,EAAenB,YAAed,EAApC,cACMkC,EAAUpB,YAAed,EAA/B,SACMmC,EAAYrB,YAAed,EAAjC,WAEMoC,EAAeC,IACfC,EAAUC,cAEhBtB,aAAoB,WAAM,QACxB,GAAKY,EAAL,SAEA,IAAMW,EAAMX,UAAZ,cACAC,UAAiBU,gBAAjBV,OACAA,oBAA2BF,EAA3BE,UAEA,IAAMW,EAAI,kBAAGR,KAAH,OAAqCO,EAA/C,KAEAC,cAAiBX,EAAjBW,SACAV,IAEAG,IAEA,IAAMQ,EAAaZ,EAAnB,QACA,OAAO,WACLK,IACIM,WAAJ,IACEA,qBAlBNxB,IAuBA,IAAM0B,EAAmB,MAAAL,KAAA,OACvB,mBAAWf,OAAQe,EAAQf,QAASvB,EADb,UAGvBA,EAHF,SAMA,OAAO8B,UACLc,uBACE,mBAAuBC,MAAOf,EAAOgB,SAD3B,GAIVhB,EALGA,SAQL,wBAAMf,IAAKc,IAIfD,4BACAA,eAAsBA,EAAtBA,UAEI,EAAJ,IACEA,yB,gfC/FK,IAAMmB,EAAOC,aAA6B,cAAgB,IACzD,EAAN,EAAM,OAAN,EAAM,gBAAN,EAAM,MAAN,EAAM,SAAN,EAAM,YAAN,EAAM,SAAN,EAAM,MAAN,EAAM,WAAN,EAAM,WAAN,EAAM,eAAN,EAAM,YAYJC,EAZF,EAYEA,gBAZF,+IAgBMC,EAAS,CACbxB,QADa,OAEbyB,SAFa,EAGbC,kBAHa,EAIbC,QAJa,EAKbC,WALa,EAMbC,cANa,EAObC,gBAPa,EAQbC,WARa,EASbC,QATa,EAUbC,aAVa,EAWbC,aAXa,EAYbC,iBAZa,EAabC,oBAAqBb,GAGvB,OAAO,gBAAC,IAAD,OAAYlC,IAAZ,EAAsBgD,MAAOb,GAApC,OAmGF,SAASc,EAAOC,GACd,OAAOC,YAAcD,GAAOpB,YAAD,MACzBA,qCADF,KAjGE,EAAJ,IACEE,sBAqGK,IAAMoB,EAAWnB,aAAiC,cAAgB,IACjE,EAAN,EAAM,UAAN,EAAM,WAAN,EAAM,SAAN,EAAM,SAAN,EAAM,QAMJoB,EANF,EAMEA,SANF,qEAUMlB,EAASmB,YAAgB,CAC7BZ,WAAYO,EADiB,GAE7BN,QAASM,EAFoB,GAG7BM,gBAH6B,EAI7BC,cAJ6B,EAK7BC,aAL6B,EAM7BC,WAAYC,IAGd,OAAO,gBAAC,IAAD,OAAY3D,IAAZ,EAAsBgD,MAAOb,GAApC,Q,qFChLK,SAASlB,IACd,ICF+B2C,EAA1B,EDECC,EAAe5D,UAArB,GAD+B,EAELA,WAA1B,GAF+B,mBAEzB,EAFyB,KAEzB,EAFyB,KAQ/B,OCT+B2D,EDKd,WACfC,mBCN+D,IAAlBC,MAAc,IACtD,aACL,kBAAM,kBAAMF,OADd,GDQO,eAAkB,WAClBC,EAAL,SACEE,EAASC,EAATD,KAED,CAJH,M,gVEEK,IAAME,EAAUhC,aAA+B,cACpD,IAAME,EAAS+B,YAAe,UAA9B,GACsBC,E,oIAAtB,CAA+BC,YAA/B,kBAEA,OACE,gBAAC,IAAD,MACEpE,IADF,EAEES,UAAW4D,YAAG,iBAAkBpF,EAAnB,YAFf,GAIE+D,MAAOb,QAKT,EAAJ,IACE8B,0B,8FCvByBzE,cAAc,CAAC,OAAQ,KAAM,KAAM,KAAvD,OAEA,SAAS2D,EAAcmB,EAAvB,GACL,OAAIC,YAAJ,GACSD,EAAA,KAAUE,YACf,cAAIA,EACF,KAEKC,EAAP,MAIAC,YAAJ,GACS,OAAAC,EAAA,cAAwB,cAE7B,OADAC,KAAcH,EAAOH,EAArBM,IACA,IAFF,IAMF,MAAIN,EACKG,EAAP,GAGF,O,+TCUK,IAAMI,EAAa5C,aAAmC,cAAgB,IAiCrD+B,EANAc,EA1BhB,EAAN,EAAM,UAAN,EAAM,WAAN,EAAM,WAAN,EAAM,QAAwCC,EAA9C,EAA8CA,cAA9C,E,oIAAA,gEAEM7C,EAAkB6C,GAwBFD,EAxBe,EAyB9B3B,YAAc2B,GAAQhD,YAAD,OAC1BkD,gDANUC,EAMVD,GALKE,eAAiBD,EAAjBC,KAAP,GAIA,WALF,IAAcD,OAUUjB,EA9BtB,EA+BOb,YAAca,GAAQlC,YAAD,OAC1BkD,gCADF,aA3BA,OACE,uBACEhF,IADF,EAEEmF,IAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEnD,gBAAiBA,GANrB,OAYE,EAAJ,IACE2C,6B,sHC1CIS,EAAwBrF,IAAMsF,MACnC,kBAAM,+DAEDC,EAAuBvF,IAAMsF,MAClC,kBAAM,+DAEDE,EAAmBxF,IAAMsF,MAC9B,kBAAM,wDA6EQG,UA1EsB,WAAO,IAAD,EACYC,qBAAWC,KAAzDC,EADkC,EAClCA,oBAAqBC,EADa,EACbA,qBACrBC,EAAkBJ,qBAAWK,KAA7BD,cAER,OACC,cAAC,WAAD,CAAUE,SAAU,cAAC,UAAD,IAApB,SACC,eAAC,IAAD,CACCC,KAAK,OACLC,eAAe,SACfC,OAAQP,EACRQ,QAASP,EAJV,UAKC,cAAC,IAAD,IACA,eAAC,IAAD,CACCrF,UAAU,iBACV6F,UAAU,SACVC,UAAU,QAHX,UAIC,cAAC,IAAD,UACC,cAAC,IAAD,CAASC,MAAM,cAAcN,KAAK,KAAlC,6BAID,cAAC,IAAD,IACA,cAAC,IAAD,UACC,cAAC,IAAD,CAAYO,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKC,QAAS,EAAhD,SACEb,GACAA,EAAcc,KAAI,SAACC,GAClB,OAAQA,EAAaC,MACpB,IAAK,eACJ,OACC,cAACtB,EAAD,CAECqB,aAAcA,GADTA,EAAaE,KAIrB,IAAK,oBAOL,IAAK,wBACJ,OACC,cAAC1B,EAAD,CAECwB,aAAcA,GADTA,EAAaE,KAIrB,IAAK,uBAOL,IAAK,2BACJ,OACC,cAACxB,EAAD,CAECsB,aAAcA,GADTA,EAAaE,KAIrB,QACC,OAAO","file":"static/js/19.565303a9.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import * as React from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param value the value or function to persist\n */\nexport function useCallbackRef<T extends (...args: any[]) => any>(\n  fn: T | undefined,\n): T {\n  const ref = React.useRef(fn)\n\n  useSafeLayoutEffect(() => {\n    ref.current = fn\n  })\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(((...args) => ref.current?.(...args)) as T, [])\n}\n","import {\n  useCallbackRef,\n  useForceUpdate,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { createPortal } from \"react-dom\"\nimport { usePortalManager } from \"./portal-manager\"\n\ntype PortalContext = HTMLDivElement | null\n\nconst [PortalContextProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n  name: \"PortalContext\",\n})\n\nconst Container: React.FC<{ zIndex?: number }> = (props) => {\n  const { children, zIndex } = props\n  return (\n    <div\n      className=\"chakra-portal-zIndex\"\n      style={{ display: \"inline-block\", position: \"absolute\", zIndex }}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport interface PortalProps {\n  /**\n   * Function called when the portal mounts\n   */\n  onMount?(): void\n  /**\n   * Function called when the portal unmounts\n   */\n  onUnmount?(): void\n  /**\n   * Function that will be called to get the parent element\n   * that the portal will be attached to.\n   */\n  getContainer?: () => HTMLElement | null\n  /**\n   * The content or node you'll like to portal\n   */\n  children: React.ReactNode\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/docs/overlay/portal\n */\n\nexport function Portal(props: PortalProps) {\n  const tempNode = React.useRef<HTMLDivElement | null>(null)\n  const portal = React.useRef<HTMLDivElement | null>(null)\n\n  const forceUpdate = useForceUpdate()\n\n  const getContainer = useCallbackRef(props.getContainer)\n  const onMount = useCallbackRef(props.onMount)\n  const onUnmount = useCallbackRef(props.onUnmount)\n\n  const parentPortal = usePortalContext()\n  const manager = usePortalManager()\n\n  useSafeLayoutEffect(() => {\n    if (!tempNode.current) return\n\n    const doc = tempNode.current!.ownerDocument\n    portal.current = doc.createElement(\"div\")\n    portal.current.className = Portal.className\n\n    const host = getContainer() ?? parentPortal ?? doc.body\n\n    host.appendChild(portal.current)\n    forceUpdate()\n\n    onMount()\n\n    const portalNode = portal.current\n    return () => {\n      onUnmount()\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode)\n      }\n    }\n  }, [])\n\n  const childrenToRender = manager?.zIndex ? (\n    <Container zIndex={manager.zIndex}>{props.children}</Container>\n  ) : (\n    props.children\n  )\n\n  return portal.current ? (\n    createPortal(\n      <PortalContextProvider value={portal.current}>\n        {childrenToRender}\n      </PortalContextProvider>,\n      portal.current,\n    )\n  ) : (\n    <span ref={tempNode} />\n  )\n}\n\nPortal.className = \"chakra-portal\"\nPortal.selector = `.${Portal.className}`\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\"\n}\n","import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">((props, ref) => {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">((props, ref) => {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n","import * as React from \"react\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport function useForceUpdate() {\n  const unloadingRef = React.useRef(false)\n  const [count, setCount] = React.useState(0)\n\n  useUnmountEffect(() => {\n    unloadingRef.current = true\n  })\n\n  return React.useCallback(() => {\n    if (!unloadingRef.current) {\n      setCount(count + 1)\n    }\n  }, [count])\n}\n","import * as React from \"react\"\n\nexport function useUnmountEffect(fn: () => void, deps: any[] = []) {\n  return React.useEffect(\n    () => () => fn(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps,\n  )\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface HeadingProps extends HTMLChakraProps<\"h2\">, ThemingProps {}\n\nexport const Heading = forwardRef<HeadingProps, \"h2\">((props, ref) => {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Heading.displayName = \"Heading\"\n}\n","import { isArray, isObject } from \"./assertion\"\nimport { Dict } from \"./types\"\nimport { objectKeys } from \"./object\"\nimport { getLastItem } from \"./array\"\n\nexport const breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n","import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">((props, ref) => {\n  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props\n\n  const templateColumns = minChildWidth\n    ? widthToColumns(minChildWidth)\n    : countToColumns(columns)\n\n  return (\n    <Grid\n      ref={ref}\n      gap={spacing}\n      columnGap={spacingX}\n      rowGap={spacingY}\n      templateColumns={templateColumns}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, 1fr)`,\n  )\n}\n","import {\n\tModal,\n\tModalBody,\n\tModalCloseButton,\n\tModalContent,\n\tModalOverlay,\n\tModalHeader,\n\tHeading,\n\tSimpleGrid,\n} from '@chakra-ui/react';\nimport React, { Suspense, useContext } from 'react';\nimport Loader from '../../components/Spinner/Spinner';\nimport { Notification as NotificationType } from '../../config/types';\nimport { NotificationContext } from '../../store/context/NotificationContext';\nimport { UIContext } from '../../store/context/UiContext';\n\nconst FriendReqNotification = React.lazy(\n\t() => import('./notificationTypes/FriendReqNotification')\n);\nconst GroupReqNotification = React.lazy(\n\t() => import('./notificationTypes/GroupReqNotification')\n);\nconst PostNotification = React.lazy(\n\t() => import('./notificationTypes/PostNotification')\n);\n\nconst Notifications: React.FC<any> = () => {\n\tconst { isNotificationsOpen, onNotificationsClose } = useContext(UIContext);\n\tconst { notifications } = useContext(NotificationContext);\n\n\treturn (\n\t\t<Suspense fallback={<Loader />}>\n\t\t\t<Modal\n\t\t\t\tsize='full'\n\t\t\t\tscrollBehavior='inside'\n\t\t\t\tisOpen={isNotificationsOpen}\n\t\t\t\tonClose={onNotificationsClose}>\n\t\t\t\t<ModalOverlay />\n\t\t\t\t<ModalContent\n\t\t\t\t\tclassName='hide-scrollbar'\n\t\t\t\t\toverflowY='scroll'\n\t\t\t\t\tminHeight='100vh'>\n\t\t\t\t\t<ModalHeader>\n\t\t\t\t\t\t<Heading color='primary.600' size='lg'>\n\t\t\t\t\t\t\tNotifications\n\t\t\t\t\t\t</Heading>\n\t\t\t\t\t</ModalHeader>\n\t\t\t\t\t<ModalCloseButton />\n\t\t\t\t\t<ModalBody>\n\t\t\t\t\t\t<SimpleGrid columns={{ sm: 1, lg: 2 }} spacing={8}>\n\t\t\t\t\t\t\t{notifications &&\n\t\t\t\t\t\t\t\tnotifications.map((notification: NotificationType) => {\n\t\t\t\t\t\t\t\t\tswitch (notification.type) {\n\t\t\t\t\t\t\t\t\t\tcase 'newGroupPost':\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<PostNotification\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={notification._id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tnotification={notification}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tcase 'friendRequestSent':\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<FriendReqNotification\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={notification._id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tnotification={notification}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tcase 'friendRequestAccepted':\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<FriendReqNotification\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={notification._id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tnotification={notification}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tcase 'joinGroupRequestSent':\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<GroupReqNotification\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={notification._id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tnotification={notification}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tcase 'joinGroupRequestAccepted':\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<GroupReqNotification\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={notification._id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tnotification={notification}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</SimpleGrid>\n\t\t\t\t\t</ModalBody>\n\t\t\t\t</ModalContent>\n\t\t\t</Modal>\n\t\t</Suspense>\n\t);\n};\n\nexport default Notifications;\n"],"sourceRoot":""}