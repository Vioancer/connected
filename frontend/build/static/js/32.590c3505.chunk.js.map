{"version":3,"sources":["../../../src/text.tsx","../../../src/flex.tsx","app/pages/notifications/notificationTypes/notificationStyles.ts","../../../src/ArrowForward.tsx","app/pages/notifications/notificationTypes/PostNotification.tsx"],"names":["Text","forwardRef","styles","useStyleConfig","rest","omitThemingProps","aliasedProps","filterUndefined","textAlign","props","textDecoration","textTransform","casing","ref","className","cx","__css","Flex","shrink","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","container","borderRadius","bg","p","pos","closebtn","color","size","top","right","senderName","fontSize","fontWeight","iconbtn","_hover","_active","ArrowForwardIcon","createIcon","d","displayName","PostNotification","notification","history","useHistory","onNotificationsClose","useContext","UIContext","removeNotification","NotificationContext","closeNotification","a","_id","axios","method","url","data","notificationId","onClick","templateColumns","spacing","src","sender","photo","ml","alignSelf","as","firstName","group","name","push","pathname","slug","state","justifySelf","mr","aria-label","icon"],"mappings":"gaAmCO,IAAMA,EAAOC,aAA2B,cAC7C,IAAMC,EAASC,YAAe,OAA9B,GACiDC,E,oIAAjD,CAA0DC,YAA1D,gDAIMC,EAAeC,YAAgB,CACnCC,UAAWC,EADwB,MAEnCC,eAAgBD,EAFmB,WAGnCE,cAAeF,EAAMG,SAGvB,OACE,gBAAC,IAAD,KACEC,IADF,EAEEC,UAAWC,YAAG,cAAeN,EAAhB,YAFf,KAKEO,MAAOd,QAKT,EAAJ,IACEF,uB,uTCIK,IAAMiB,EAAOhB,aAA6B,cAAgB,IACzD,EAAN,EAAM,YAAN,EAAM,QAAN,EAAM,UAAN,EAAM,OAAN,EAAM,QAAN,EAAM,KAOJiB,EAPF,EAOEA,OAPF,E,oIAAA,mEAWMhB,EAAS,CACbiB,QADa,OAEbC,cAFa,EAGbC,WAHa,EAIbC,eAJa,EAKbC,SALa,EAMbC,UANa,EAObC,SAPa,EAQbC,WAAYR,GAGd,OAAO,gBAAC,IAAD,OAAYL,IAAZ,EAAsBG,MAAOd,GAApC,OAGE,EAAJ,IACEe,uB,iCC1Daf,IAhCA,CACdyB,UAAW,CACVC,aAAc,MACdC,GAAI,WACJC,EAAG,EACHC,IAAK,YAENC,SAAU,CACTC,MAAO,OACPC,KAAM,KACNH,IAAK,WACLI,IAAK,EACLC,MAAO,GAERC,WAAY,CACXC,SAAU,SACVL,MAAO,cACPtB,cAAe,aACf4B,WAAY,QAEbC,QAAS,CACRX,GAAI,WACJY,OAAQ,CACPZ,GAAI,YAELa,QAAS,CACRb,GAAI,YAELK,KAAM,Q,iCC5BR,+CAEaS,EAAmBC,YAAW,CACzCC,EADyC,4DAEzCC,YAAa,sB,oNC8EAC,UA3D2B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACtCC,EAAUC,cACRC,EAAyBC,qBAAWC,KAApCF,qBACAG,EAAuBF,qBAAWG,KAAlCD,mBAEFE,EAAiB,uCAAG,sBAAAC,EAAA,6DACzBH,EAAmBN,EAAaU,KADP,kBAGlBC,IAAM,CACXC,OAAQ,QACRC,IAAK,6BACLC,KAAM,CACLC,eAAgBf,EAAaU,OAPP,8GAAH,qDAsBvB,OACC,eAAC,IAAD,2BAASxD,IAAOyB,WAAhB,cACC,cAAC,IAAD,aAAaqC,QAASR,GAAuBtD,IAAO8B,WACpD,eAAC,IAAD,CACCiC,gBAAgB,iBAChBC,QAAS,EACT5C,eAAe,SACfD,WAAW,SAJZ,UAKC,eAAC,IAAD,CAAMA,WAAW,SAAjB,UACC,cAAC,IAAD,CAAQa,KAAK,KAAKiC,IAAKnB,EAAaoB,OAAOC,QAC3C,eAAC,IAAD,yBAAKC,GAAI,EAAGC,UAAU,WAAWC,GAAG,QAAWtE,IAAOmC,YAAtD,cACEW,EAAaoB,OAAOK,UADtB,cAKD,eAAC,IAAD,CAAMxC,MAAM,OAAOK,SAAS,SAASiC,UAAU,WAA/C,iCACsBvB,EAAa0B,MAAMC,QAGzC,cAAC,IAAD,CACCX,QA7BmB,WACtBf,EAAQ2B,KAAK,CACZC,SAAS,eAAD,OAAiB7B,EAAa0B,MAAMhB,IAApC,YAA2CV,EAAa0B,MAAMI,MACtEC,MAAO/B,EAAa0B,MAAMhB,MAE3BP,IACAK,KAwBGwB,YAAY,SACZC,GAAI,EACJ/C,KAAK,KACLgD,aAAW,YACXC,KAAM,cAAC,IAAD","file":"static/js/32.590c3505.chunk.js","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__, filterUndefined } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/docs/typography/text\n */\nexport const Text = forwardRef<TextProps, \"p\">((props, ref) => {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(\n    props,\n  )\n\n  const aliasedProps = filterUndefined({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Text.displayName = \"Text\"\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">((props, ref) => {\n  const {\n    direction,\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Flex.displayName = \"Flex\"\n}\n","const styles = {\n\tcontainer: {\n\t\tborderRadius: '4px',\n\t\tbg: 'gray.800',\n\t\tp: 5,\n\t\tpos: 'relative' as any,\n\t},\n\tclosebtn: {\n\t\tcolor: '#fff',\n\t\tsize: 'sm',\n\t\tpos: 'absolute' as any,\n\t\ttop: 1,\n\t\tright: 1,\n\t},\n\tsenderName: {\n\t\tfontSize: '1.1rem',\n\t\tcolor: 'primary.500',\n\t\ttextTransform: 'capitalize' as any,\n\t\tfontWeight: 'bold' as any,\n\t},\n\ticonbtn: {\n\t\tbg: 'gray.700',\n\t\t_hover: {\n\t\t\tbg: 'gray.700',\n\t\t},\n\t\t_active: {\n\t\t\tbg: 'gray.700',\n\t\t},\n\t\tsize: 'sm',\n\t},\n};\n\nexport default styles;\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ArrowForwardIcon = createIcon({\n  d: \"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\",\n  displayName: \"ArrowForwardIcon\",\n})\n","import {\n\tAvatar,\n\tBox,\n\tCloseButton,\n\tFlex,\n\tGrid,\n\tIconButton,\n\tText,\n} from '@chakra-ui/react';\nimport axios from 'axios';\nimport { ArrowForwardIcon } from '@chakra-ui/icons';\nimport React, { useContext } from 'react';\nimport { Notification } from '../../../config/types';\nimport { useHistory } from 'react-router-dom';\nimport { UIContext } from '../../../store/context/UiContext';\nimport { NotificationContext } from '../../../store/context/NotificationContext';\n\nimport styles from './notificationStyles';\n\ninterface Props {\n\tnotification: Notification;\n}\n\nconst PostNotification: React.FC<Props> = ({ notification }) => {\n\tconst history = useHistory();\n\tconst { onNotificationsClose } = useContext(UIContext);\n\tconst { removeNotification } = useContext(NotificationContext);\n\n\tconst closeNotification = async () => {\n\t\tremoveNotification(notification._id);\n\t\ttry {\n\t\t\tawait axios({\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\turl: '/api/v1/notifications/hide',\n\t\t\t\tdata: {\n\t\t\t\t\tnotificationId: notification._id,\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (_) {}\n\t};\n\n\tconst navigateToPost = () => {\n\t\thistory.push({\n\t\t\tpathname: `/app/groups/${notification.group._id}/${notification.group.slug}`,\n\t\t\tstate: notification.group._id,\n\t\t});\n\t\tonNotificationsClose();\n\t\tcloseNotification();\n\t};\n\n\treturn (\n\t\t<Box {...styles.container}>\n\t\t\t<CloseButton onClick={closeNotification} {...styles.closebtn} />\n\t\t\t<Grid\n\t\t\t\ttemplateColumns='.5fr 1fr .25fr'\n\t\t\t\tspacing={4}\n\t\t\t\tjustifyContent='center'\n\t\t\t\talignItems='center'>\n\t\t\t\t<Flex alignItems='center'>\n\t\t\t\t\t<Avatar size='sm' src={notification.sender.photo} />\n\t\t\t\t\t<Box ml={3} alignSelf='flex-end' as='span' {...styles.senderName}>\n\t\t\t\t\t\t{notification.sender.firstName}&nbsp;\n\t\t\t\t\t</Box>\n\t\t\t\t</Flex>\n\n\t\t\t\t<Text color='#fff' fontSize='1.1rem' alignSelf='flex-end'>\n\t\t\t\t\tposted something in {notification.group.name}\n\t\t\t\t</Text>\n\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={navigateToPost}\n\t\t\t\t\tjustifySelf='center'\n\t\t\t\t\tmr={3}\n\t\t\t\t\tsize='sm'\n\t\t\t\t\taria-label='post-goto'\n\t\t\t\t\ticon={<ArrowForwardIcon />}\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t</Box>\n\t);\n};\n\nexport default PostNotification;\n"],"sourceRoot":""}