{"version":3,"sources":["../../../src/assertion.ts","../../../src/react-helpers.ts","../../../src/button-group.tsx","../../../src/use-image.ts","../../../src/button.tsx","../../../src/dom.ts","../../../src/avatar.tsx","../../../src/icon-button.tsx","../../../src/icon.tsx","../../../src/create-icon.tsx"],"names":["isFunction","value","__DEV__","process","options","strict","errorMessage","name","Context","React","context","Error","createContext","ButtonGroup","forwardRef","spacing","isDisabled","_className","cx","size","colorScheme","variant","groupStyles","display","borderRightRadius","borderRadius","borderLeftRadius","marginLeft","ref","role","__css","className","useImage","props","ignoreFallback","useState","useEffect","setStatus","src","imageRef","useRef","load","useCallback","flush","img","event","onLoad","error","onError","crossOrigin","srcSet","sizes","useSafeLayoutEffect","status","Button","group","useButtonGroup","styles","useStyleConfig","omitThemingProps","iconSpacing","type","as","_focus","mergeWith","zIndex","buttonStyles","appearance","alignItems","justifyContent","transition","userSelect","position","whiteSpace","verticalAlign","outline","width","isFullWidth","disabled","undefined","data-active","dataAttr","data-loading","leftIcon","marginEnd","isLoading","fontSize","lineHeight","label","loadingText","opacity","rightIcon","marginStart","ButtonIcon","_children","focusable","ButtonSpinner","children","color","height","spinnerStyles","window","classNames","initials","firstName","lastName","AvatarName","getInitials","useStyles","aria-label","DefaultIcon","viewBox","fill","d","baseStyle","textAlign","textTransform","fontWeight","flexShrink","Avatar","useMultiStyleConfig","icon","borderColor","avatarStyles","borderWidth","showBorder","loading","AvatarImage","alt","objectFit","condition","IconButton","ariaLabel","element","padding","isRound","win","e","getWindow","node","Boolean","checkIsBrowser","fallbackIcon","path","stroke","strokeWidth","strokeLinecap","strokeMiterlimit","cy","r","Icon","shared","w","h","_viewBox","_path","createIcon","defaultProps","Comp","pathDefinition"],"mappings":"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","file":"static/js/5.f70b42d7.chunk.js","sourcesContent":["import { ChangeEvent } from \"react\"\nimport { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport const isNotNumber = (value: any) =>\n  typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value)\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport const isEmptyArray = (value: any) => isArray(value) && value.length === 0\n\n// Function assertions\nexport function isFunction(value: any): value is Function {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport const isDefined = (value: any) =>\n  typeof value !== \"undefined\" && value !== undefined\n\nexport const isUndefined = (value: any): value is undefined =>\n  typeof value === \"undefined\" || value === undefined\n\n// Object assertions\nexport const isObject = (value: any): value is Dict => {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport const isEmptyObject = (value: any) =>\n  isObject(value) && Object.keys(value).length === 0\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport const isNull = (value: any): value is null => value == null\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\n// Event assertions\nexport function isInputEvent(value: any): value is ChangeEvent {\n  return value && isObject(value) && isObject(value.target)\n}\n\n// Empty assertions\nexport const isEmpty = (value: any) => {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n","import * as React from \"react\"\nimport { isFunction } from \"./assertion\"\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  /**\n   * Error message to throw if the context is `undefined`\n   */\n  errorMessage?: string\n  /**\n   * The display name of the context\n   */\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext<ContextType>(options: CreateContextOptions = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n\n    if (!context && strict) {\n      throw new Error(errorMessage)\n    }\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport function getValidChildren(children: React.ReactNode) {\n  return React.Children.toArray(children).filter((child) =>\n    React.isValidElement(child),\n  ) as React.ReactElement[]\n}\n\ntype ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (isFunction(ref)) {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\nexport function mergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return (value: T) => {\n    refs.forEach((ref) => assignRef(ref, value))\n  }\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface ButtonGroupProps extends HTMLChakraProps<\"div\">, ThemingProps {\n  /**\n   * If `true`, the borderRadius of button that are direct children will be altered\n   * to look flushed together\n   */\n  isAttached?: boolean\n  /**\n   * If `true`, all wrapped button will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The spacing between the buttons\n   * @default '0.5rem'\n   * @type SystemProps[\"marginRight\"]\n   */\n  spacing?: SystemProps[\"marginRight\"]\n}\n\ninterface ButtonGroupContext extends ThemingProps {\n  isDisabled?: boolean\n}\n\nconst [ButtonGroupProvider, useButtonGroup] = createContext<ButtonGroupContext>(\n  {\n    strict: false,\n    name: \"ButtonGroupContext\",\n  },\n)\n\nexport { useButtonGroup }\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">((props, ref) => {\n  const {\n    size,\n    colorScheme,\n    variant,\n    className,\n    spacing = \"0.5rem\",\n    isAttached,\n    isDisabled,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__group\", className)\n\n  const context = React.useMemo(\n    () => ({ size, colorScheme, variant, isDisabled }),\n    [size, colorScheme, variant, isDisabled],\n  )\n\n  let groupStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n  }\n\n  if (isAttached) {\n    groupStyles = {\n      ...groupStyles,\n      \"> *:first-of-type:not(:last-of-type)\": { borderRightRadius: 0 },\n      \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n      \"> *:not(:first-of-type):last-of-type\": { borderLeftRadius: 0 },\n    }\n  } else {\n    groupStyles = {\n      ...groupStyles,\n      \"& > *:not(style) ~ *:not(style)\": { marginLeft: spacing },\n    }\n  }\n\n  return (\n    <ButtonGroupProvider value={context}>\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        className={_className}\n        {...rest}\n      />\n    </ButtonGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  ButtonGroup.displayName = \"ButtonGroup\"\n}\n","import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  ImgHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?(event: React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?(error: string | React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: ImgHTMLAttributes<any>[\"crossOrigin\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n\n    img.src = src\n\n    if (crossOrigin) {\n      img.crossOrigin = crossOrigin\n    }\n\n    if (srcSet) {\n      img.srcset = srcSet\n    }\n\n    if (sizes) {\n      img.sizes = sizes\n    }\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.((event as unknown) as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type = \"button\",\n    spinner,\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      as={as}\n      type={as ? undefined : type}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>\n      )}\n      {isLoading && (\n        <ButtonSpinner\n          __css={{ fontSize: \"1em\", lineHeight: \"normal\" }}\n          spacing={iconSpacing}\n          label={loadingText}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0}>{children}</chakra.span>\n        : children}\n      {rightIcon && !isLoading && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span {...rest} className={_className}>\n      {_children}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const spinnerStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    marginEnd: label ? spacing : 0,\n    ...__css,\n  }\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n","import * as React from \"react\"\nimport { Booleanish, EventKeys } from \"./types\"\n\nlet win: Window | undefined\n\n/**\n * Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n * hits a memory leak, whereas aliasing it and calling \"typeof win\" does not.\n * Caching the window value at the file scope lets us minimize the impact.\n *\n * @see IE11 Memory Leak Issue https://github.com/microsoft/fluentui/pull/9010#issuecomment-490768427\n */\ntry {\n  win = window\n} catch (e) {\n  /* no-op */\n}\n\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11.\n */\nexport const getWindow = (node?: HTMLElement | null) =>\n  node?.ownerDocument?.defaultView ?? win\n\n/**\n * Check if we can use the DOM. Useful for SSR purposes\n */\nfunction checkIsBrowser() {\n  const win = getWindow()\n  return Boolean(\n    typeof win !== \"undefined\" && win.document && win.document.createElement,\n  )\n}\n\nexport const isBrowser = checkIsBrowser()\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nexport function normalizeEventKey(event: React.KeyboardEvent) {\n  const { key, keyCode } = event\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0\n\n  const eventKey = isArrowKey ? `Arrow${key}` : key\n\n  return eventKey as EventKeys\n}\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? \"\" : undefined) as Booleanish\n\nexport const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined\n\nexport const getDocument = (node?: HTMLElement | null) =>\n  (node?.ownerDocument || isBrowser ? document : null) as Document | null\n\nexport const cx = (...classNames: any[]) => classNames.filter(Boolean).join(\" \")\n\nexport function getActiveElement(node?: HTMLElement) {\n  const doc = getDocument(node)\n  return doc?.activeElement as HTMLElement\n}\n\nexport function contains(parent: HTMLElement, child: HTMLElement) {\n  return parent === child || parent.contains(child)\n}\n","import type { ImageProps } from \"@chakra-ui/image\"\nimport { useImage } from \"@chakra-ui/image\"\nimport type {\n  ChakraComponent,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface AvatarOptions {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * The size of the avatar.\n   */\n  size?: string\n  /**\n   * If `true`, the `Avatar` will show a border around it.\n   *\n   * Best for a group of avatars\n   */\n  showBorder?: boolean\n  /**\n   * The badge at the bottom right corner of the avatar.\n   */\n  children?: React.ReactNode\n  /**\n   * The image url of the `Avatar`\n   */\n  src?: string\n  /**\n   * List of sources to use for different screen resolutions\n   */\n  srcSet?: string\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * The border color of the avatar\n   * @type SystemProps[\"borderColor\"]\n   */\n  borderColor?: SystemProps[\"borderColor\"]\n  /**\n   * Function called when image failed to load\n   */\n  onError?: () => void\n  /**\n   * The default avatar used as fallback when `name`, and `src`\n   * is not specified.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * Function to get the initials to display\n   */\n  getInitials?: (name: string) => string\n}\n\nexport interface AvatarBadgeProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  const badgeStyles: SystemStyleObject = {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    right: \"0\",\n    bottom: \"0\",\n    ...styles.badge,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-avatar__badge\", props.className)}\n      __css={badgeStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\"\n}\n\nfunction initials(name: string) {\n  const [firstName, lastName] = name.split(\" \")\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n\n/**\n * The avatar name container\n */\nconst AvatarName: React.FC<AvatarNameProps> = (props) => {\n  const { name, getInitials, ...rest } = props\n  const styles = useStyles()\n\n  return (\n    <chakra.div aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nconst DefaultIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps {}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    src,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    getInitials = initials,\n    icon = <DefaultIcon />,\n    loading,\n    children,\n    borderColor,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      __css={avatarStyles}\n    >\n      <StylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          loading={loading}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.span>\n  )\n})\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\"\n}\n\ninterface AvatarImageProps\n  extends ImageProps,\n    Pick<AvatarProps, \"getInitials\" | \"borderRadius\" | \"icon\" | \"name\"> {}\n\nconst AvatarImage: React.FC<AvatarImageProps> = ({\n  src,\n  onError,\n  getInitials,\n  name,\n  borderRadius,\n  loading,\n  icon = <DefaultIcon />,\n}) => {\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      React.cloneElement(icon, { role: \"img\" })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      alt={name}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\"\n}\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype Omitted =\n  | \"leftIcon\"\n  | \"isFullWidth\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, Omitted> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = React.isValidElement(element)\n      ? React.cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : \"md\"}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\"\n}\n","import {\n  chakra,\n  ChakraProps,\n  forwardRef,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst fallbackIcon = {\n  path: (\n    <g stroke=\"currentColor\" strokeWidth=\"1.5\">\n      <path\n        strokeLinecap=\"round\"\n        fill=\"none\"\n        d=\"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25\"\n      />\n      <path\n        fill=\"currentColor\"\n        strokeLinecap=\"round\"\n        d=\"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0\"\n      />\n      <circle fill=\"none\" strokeMiterlimit=\"10\" cx=\"12\" cy=\"12\" r=\"11.25\" />\n    </g>\n  ),\n  viewBox: \"0 0 24 24\",\n}\n\nexport interface IconProps\n  extends Omit<React.SVGAttributes<SVGElement>, keyof ChakraProps>,\n    ChakraProps {}\n\nexport const Icon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const {\n    as: element,\n    viewBox,\n    color = \"currentColor\",\n    focusable = false,\n    children,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-icon\", className)\n\n  const styles: SystemStyleObject = {\n    w: \"1em\",\n    h: \"1em\",\n    display: \"inline-block\",\n    lineHeight: \"1em\",\n    flexShrink: 0,\n    color,\n    ...__css,\n  }\n\n  const shared: any = {\n    ref,\n    focusable,\n    className: _className,\n    __css: styles,\n  }\n\n  const _viewBox = viewBox ?? fallbackIcon.viewBox\n\n  /**\n   * If you're using an icon library like `react-icons`.\n   * Note: anyone passing the `as` prop, should manage the `viewBox` from the external component\n   */\n  if (element && typeof element !== \"string\") {\n    return <chakra.svg as={element} {...shared} {...rest} />\n  }\n\n  const _path = (children ?? fallbackIcon.path) as React.ReactNode\n\n  return (\n    <chakra.svg verticalAlign=\"middle\" viewBox={_viewBox} {...shared} {...rest}>\n      {_path}\n    </chakra.svg>\n  )\n})\n\nif (__DEV__) {\n  Icon.displayName = \"Icon\"\n}\n\nexport default Icon\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwriteable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    path,\n    displayName,\n    defaultProps = {},\n  } = options\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path ?? <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  if (__DEV__) {\n    Comp.displayName = displayName\n  }\n\n  return Comp\n}\n"],"sourceRoot":""}