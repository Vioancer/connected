{"version":3,"sources":["app/config/themeConfig.ts","app/App.tsx","index.tsx","app/store/reducers/authReducers.ts","app/store/context/AuthContext.tsx","app/store/context/SocketContext.tsx","app/store/actionTypes.ts","app/store/context/UiContext.tsx","app/store/reducers/notitficationReducers.ts","app/store/context/NotificationContext.tsx","app/components/Spinner/Spinner.tsx","app/store/context/SearchContext.tsx"],"names":["breakpoints","createBreakpoints","xs","sm","md","lg","xl","theme","extendTheme","fonts","body","brand","colors","primary","50","100","200","300","400","500","600","700","800","900","secondary","tertiary","config","initialColorMode","useSystemColorMode","Notifications","React","lazy","CreatePost","CreateGroup","Navigation","Body","Footer","App","useDisclosure","isOpen","onClose","useMediaQuery","moreThan300","NotificationContext","SearchContext","fallback","mt","colorScheme","textAlign","app","StrictMode","AuthContext","ReactDOM","render","document","getElementById","initialState","user","userInit","userError","logoutInit","logoutError","userGroups","userGroupsInit","userGroupsError","reducer","state","action","type","actionTypes","error","requestsSent","push","friend","groups","newGroups","group","updateGroup","index","findIndex","el","_id","createContext","AuthContextProvider","children","useReducer","authState","dispatch","checkUserExists","useCallback","a","axios","url","method","res","data","useEffect","methods","logoutUser","response","updateUserRequestsSent","getUserGroups","userCreateNewGroup","updateUser","userUpdateGroup","Provider","value","socket","io","SocketContext","LOGOUT_USER_INIT","LOGOUT_USER_SUCCESS","LOGOUT_USER_FAILED","UPDATE_USER_FRIEND_SENT_REQUESTS","GET_USER_GROUPS_INIT","GET_USER_GROUPS_SUCCESS","GET_USER_GROUPS_FAILED","USER_CREATE_NEW_GROUP","USER_UPDATE_GROUP","GET_USER_NOTIFICATIONS_INIT","GET_USER_NOTIFICATIONS_SUCCESS","GET_USER_NOTIFICATIONS_FAILED","REMOVE_NOTIFICATION","UPDATE_USER_INIT","UPDATE_USER_SUCCESS","UPDATE_USER_FAILED","UIContext","undefined","UIContextProvider","isCreatePostOpen","onCreatePostOpen","onOpen","onCreatePostClose","isCreateGroupOpen","onCreateGroupOpen","onCreateGroupClose","isNotificationsOpen","onNotificationsOpen","onNotificationsClose","notifications","notificationsInit","notificationsError","newNotifications","length","filter","notification","NotificationContextProvider","useContext","notificationState","on","getUserNotifications","readAllNotifications","removeNotification","Loader","d","alignItems","justifyContent","h","boxSize","thickness","speed","emptyColor","color","SearchContextProvider","useState","searchText","setSearchText","setGroups","people","setPeople","to","setTo","groupId","updatedGroups","pathname","useLocation","startsWith","findGroups","users","findFriends","emit","userId","name","userFriends","friends","newPeople","updatedPeople","sender","searchGroups","searchPeople","handleSearchTextChange","updateGroupRequest","newUpdatedRequests","groupIndex","requests"],"mappings":"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","file":"static/js/main.0b6ba873.chunk.js","sourcesContent":["import { extendTheme } from '@chakra-ui/react';\nimport { createBreakpoints } from '@chakra-ui/theme-tools';\n\nconst fonts = {\n\tbody: 'Lato, sans-serif',\n\tbrand: 'GrinchedRegular, sans-serif ',\n};\n\nconst colors = {\n\tprimary: {\n\t\t50: '#add6ff',\n\t\t100: '#85c2ff',\n\t\t200: '#5cadff',\n\t\t300: '#47a3ff',\n\t\t400: '#3399ff',\n\t\t500: '#1e90ff',\n\t\t600: '#0a85ff',\n\t\t700: '#007af5',\n\t\t800: '#0070e0',\n\t\t900: '#0066cc',\n\t},\n\n\tsecondary: {\n\t\t50: '#fff',\n\t\t100: '#ecf1fe',\n\t\t200: '#d8e3fd',\n\t\t300: '#c5d5fc',\n\t\t400: '#adc4fb',\n\t\t500: '#9eb9fa',\n\t\t600: '#8aacf9',\n\t\t700: '#779ef9',\n\t\t800: '#6390f8',\n\t\t900: '#5082f7',\n\t},\n\n\t// secondary: '#adc4fb',\n\ttertiary: '#e3f0ff',\n};\n\nconst breakpoints = createBreakpoints({\n\txs: '300px',\n\tsm: '320px',\n\tmd: '768px',\n\tlg: '960px',\n\txl: '1200px',\n\t'1778px': '1778px',\n});\n\nconst config = {\n\tinitialColorMode: 'light',\n\tuseSystemColorMode: false,\n};\n\nconst theme = extendTheme({ fonts, colors, breakpoints, config });\n\nexport default theme;\n","import React, { Suspense } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport {\n\tChakraProvider,\n\tuseDisclosure,\n\tuseMediaQuery,\n\tText,\n} from '@chakra-ui/react';\n\nimport theme from './config/themeConfig';\n\nimport UIContextProvider from './store/context/UiContext';\nimport SearchContextProvider from './store/context/SearchContext';\nimport NotificationContextProvider from './store/context/NotificationContext';\n\nimport Loader from './components/Spinner/Spinner';\n\nconst Notifications = React.lazy(\n\t() => import('./pages/notifications/Notifications')\n);\n\nconst CreatePost = React.lazy(\n\t() => import('./pages/app/containers/CreatePost')\n);\n\nconst CreateGroup = React.lazy(\n\t() => import('./pages/app/containers/CreateGroup')\n);\n\nconst Navigation = React.lazy(() => import('./layout/Navigation/Navigation'));\nconst Body = React.lazy(() => import('./layout/Body/Body'));\nconst Footer = React.lazy(() => import('./layout/Footer/Footer'));\n\nconst App: React.FC = () => {\n\tconst { isOpen, onClose } = useDisclosure();\n\tconst [moreThan300] = useMediaQuery('(min-width: 320px)');\n\n\treturn (\n\t\t<>\n\t\t\t{moreThan300 ? (\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<NotificationContextProvider>\n\t\t\t\t\t\t<SearchContextProvider>\n\t\t\t\t\t\t\t<ChakraProvider theme={theme}>\n\t\t\t\t\t\t\t\t<UIContextProvider>\n\t\t\t\t\t\t\t\t\t<Suspense fallback={<Loader />}>\n\t\t\t\t\t\t\t\t\t\t<Notifications isOpen={isOpen} onClose={onClose} />\n\t\t\t\t\t\t\t\t\t\t<CreatePost />\n\t\t\t\t\t\t\t\t\t\t<CreateGroup />\n\t\t\t\t\t\t\t\t\t\t<Navigation />\n\t\t\t\t\t\t\t\t\t\t<Body />\n\t\t\t\t\t\t\t\t\t\t<Footer />\n\t\t\t\t\t\t\t\t\t</Suspense>\n\t\t\t\t\t\t\t\t</UIContextProvider>\n\t\t\t\t\t\t\t</ChakraProvider>\n\t\t\t\t\t\t</SearchContextProvider>\n\t\t\t\t\t</NotificationContextProvider>\n\t\t\t\t</BrowserRouter>\n\t\t\t) : (\n\t\t\t\t<Text mt={15} colorScheme='primary' textAlign='center'>\n\t\t\t\t\tUse a Larger screen to view this webpage\n\t\t\t\t</Text>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\n\nimport App from './app/App';\nimport { ColorModeScript } from '@chakra-ui/react';\nimport AuthContextProvider from './app/store/context/AuthContext';\n\nconst app: JSX.Element = (\n\t<React.StrictMode>\n\t\t<AuthContextProvider>\n\t\t\t<ColorModeScript initialColorMode='light' />\n\t\t\t<App />\n\t\t</AuthContextProvider>\n\t</React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n","import { User } from '../../config/types';\n\nimport * as actionTypes from '../actionTypes';\n\ntype AuthState = {\n\tuser: null | User;\n\n\tuserInit: boolean;\n\tuserError: any;\n\n\tlogoutInit: boolean;\n\tlogoutError: null | object;\n\n\tuserGroups: null;\n\tuserGroupsInit: boolean;\n\tuserGroupsError: null;\n};\n\ntype AuthActionType = {\n\ttype: string;\n\tuser?: null | User;\n\terror?: null | object;\n\tfriend?: string;\n\tgroups?: any;\n\tgroup?: any;\n};\n\nexport const initialState = {\n\tuser: null,\n\n\tuserInit: false,\n\tuserError: null,\n\n\tlogoutInit: false,\n\tlogoutError: null,\n\n\tuserGroups: null,\n\tuserGroupsInit: false,\n\tuserGroupsError: null,\n};\n\nconst reducer = (state: AuthState = initialState, action: AuthActionType) => {\n\tswitch (action.type) {\n\t\tcase actionTypes.LOGOUT_USER_INIT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlogoutInit: true,\n\t\t\t\tlogoutError: null,\n\t\t\t};\n\t\tcase actionTypes.LOGOUT_USER_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlogoutInit: false,\n\t\t\t\tuser: null,\n\t\t\t};\n\t\tcase actionTypes.LOGOUT_USER_FAILED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlogoutInit: false,\n\t\t\t\tlogoutError: action.error,\n\t\t\t};\n\n\t\tcase actionTypes.UPDATE_USER_FRIEND_SENT_REQUESTS:\n\t\t\tconst user = { ...state.user };\n\t\t\tconst requestsSent = [...state.user!.requestsSent];\n\t\t\trequestsSent.push(action.friend!);\n\t\t\tuser['requestsSent'] = requestsSent;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser,\n\t\t\t};\n\n\t\tcase actionTypes.GET_USER_GROUPS_INIT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserGroupsInit: true,\n\t\t\t\tuserGroupsError: null,\n\t\t\t};\n\n\t\tcase actionTypes.GET_USER_GROUPS_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserGroupsInit: false,\n\t\t\t\tuserGroups: action.groups,\n\t\t\t};\n\n\t\tcase actionTypes.GET_USER_GROUPS_FAILED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserGroupsInit: false,\n\t\t\t\tuserGroupsError: action.error,\n\t\t\t};\n\n\t\tcase actionTypes.USER_CREATE_NEW_GROUP:\n\t\t\tlet newGroups: any = [];\n\t\t\tif (state.userGroups) newGroups = [...state.userGroups!];\n\n\t\t\tnewGroups.push(action.group);\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserGroups: newGroups,\n\t\t\t};\n\n\t\tcase actionTypes.USER_UPDATE_GROUP:\n\t\t\tlet updateGroup: any = [];\n\t\t\tif (state.userGroups) updateGroup = [...state.userGroups!];\n\n\t\t\tconst index = updateGroup.findIndex((el: any) => {\n\t\t\t\treturn el._id === action.group._id;\n\t\t\t});\n\n\t\t\tupdateGroup[index] = action.group;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserGroups: updateGroup,\n\t\t\t};\n\n\t\tcase actionTypes.UPDATE_USER_INIT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserInit: true,\n\t\t\t};\n\n\t\tcase actionTypes.UPDATE_USER_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: action.user,\n\t\t\t\tuserInit: false,\n\t\t\t};\n\n\t\tcase actionTypes.UPDATE_USER_FAILED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserInit: false,\n\t\t\t\tuserError: action.error,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default reducer;\n","import React, { useCallback } from 'react';\nimport axios, { AxiosResponse } from 'axios';\n\nimport reducer, { initialState } from '../reducers/authReducers';\nimport * as actionTypes from '../actionTypes';\n\nimport { Group as GroupTypes, User } from './../../config/types';\n\nexport const AuthContext = React.createContext<Partial<any>>(initialState);\n\nconst AuthContextProvider = ({ children }: any) => {\n\tconst [authState, dispatch] = React.useReducer<React.Reducer<any, any>>(\n\t\treducer,\n\t\tinitialState\n\t);\n\n\tconst checkUserExists = useCallback(async () => {\n\t\tdispatch({ type: actionTypes.UPDATE_USER_INIT });\n\t\ttry {\n\t\t\tconst res: AxiosResponse = await axios({\n\t\t\t\turl: '/api/v1/users/checkAuth',\n\t\t\t\tmethod: 'GET',\n\t\t\t});\n\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.UPDATE_USER_SUCCESS,\n\t\t\t\tuser: res.data.user,\n\t\t\t});\n\t\t} catch (_) {\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.UPDATE_USER_FAILED,\n\t\t\t\terror: null,\n\t\t\t});\n\t\t}\n\t}, []);\n\n\tReact.useEffect(() => {\n\t\tcheckUserExists();\n\t}, [checkUserExists]);\n\n\tconst logoutUser: () => void = async () => {\n\t\tdispatch({ type: actionTypes.LOGOUT_USER_INIT });\n\t\ttry {\n\t\t\tawait axios({\n\t\t\t\turl: '/api/v1/users/logout',\n\t\t\t\tmethod: 'GET',\n\t\t\t});\n\n\t\t\tdispatch({ type: actionTypes.LOGOUT_USER_SUCCESS });\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.LOGOUT_USER_FAILED,\n\t\t\t\terror: err.response.data,\n\t\t\t});\n\t\t}\n\t};\n\n\tconst updateUserRequestsSent = (friend: string) => {\n\t\treturn dispatch({\n\t\t\ttype: actionTypes.UPDATE_USER_FRIEND_SENT_REQUESTS,\n\t\t\tfriend,\n\t\t});\n\t};\n\n\tconst getUserGroups = async () => {\n\t\tdispatch({\n\t\t\ttype: actionTypes.GET_USER_GROUPS_INIT,\n\t\t});\n\t\ttry {\n\t\t\tconst res = await axios({\n\t\t\t\turl: '/api/v1/users/groups',\n\t\t\t\tmethod: 'GET',\n\t\t\t});\n\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.GET_USER_GROUPS_SUCCESS,\n\t\t\t\tgroups: res.data.groups,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.GET_USER_GROUPS_FAILED,\n\t\t\t\terror: err,\n\t\t\t});\n\t\t}\n\t};\n\n\tconst userCreateNewGroup = (group: GroupTypes) => {\n\t\tdispatch({\n\t\t\ttype: actionTypes.USER_CREATE_NEW_GROUP,\n\t\t\tgroup,\n\t\t});\n\t};\n\n\tconst userUpdateGroup = (group: GroupTypes) => {\n\t\tdispatch({\n\t\t\ttype: actionTypes.USER_UPDATE_GROUP,\n\t\t\tgroup,\n\t\t});\n\t};\n\n\tconst updateUser = (user: User) => {\n\t\tdispatch({\n\t\t\ttype: actionTypes.UPDATE_USER_SUCCESS,\n\t\t\tuser,\n\t\t});\n\t};\n\n\tconst methods = {\n\t\tlogoutUser,\n\t\tupdateUserRequestsSent,\n\t\tgetUserGroups,\n\t\tuserCreateNewGroup,\n\t\tupdateUser,\n\t\tcheckUserExists,\n\t\tuserUpdateGroup,\n\t};\n\n\treturn (\n\t\t<AuthContext.Provider value={{ ...authState, ...methods }}>\n\t\t\t{children}\n\t\t</AuthContext.Provider>\n\t);\n};\n\nexport default AuthContextProvider;\n","import { createContext } from 'react';\nimport { io } from 'socket.io-client';\n\nconst socket = io('/');\n\nexport const SocketContext = createContext<Partial<any>>(socket);\n\nconst SocketContextProvider = ({ children }: any) => {\n\treturn (\n\t\t<SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\n\t);\n};\n\nexport default SocketContextProvider;\n","export const LOGOUT_USER_INIT = 'LOGOUT_USER_INIT';\nexport const LOGOUT_USER_SUCCESS = 'LOGOUT_USER_SUCCESS';\nexport const LOGOUT_USER_FAILED = 'LOGOUT_USER_FAILED';\n\nexport const UPDATE_USER_FRIEND_SENT_REQUESTS =\n\t'UPDATE_USER_FRIEND_SENT_REQUESTS';\n\nexport const GET_USER_GROUPS_INIT = 'GET_USER_GROUPS_INIT';\nexport const GET_USER_GROUPS_SUCCESS = 'GET_USER_GROUPS_SUCCESS';\nexport const GET_USER_GROUPS_FAILED = 'GET_USER_GROUPS_FAILED';\n\nexport const USER_CREATE_NEW_GROUP = 'USER_CREATE_NEW_GROUP';\n\nexport const USER_UPDATE_GROUP = 'USER_UPDATE_GROUP';\n\nexport const GET_USER_NOTIFICATIONS_INIT = 'GET_USER_NOTIFICATIONS_INIT';\nexport const GET_USER_NOTIFICATIONS_SUCCESS = 'GET_USER_NOTIFICATIONS_SUCCESS';\nexport const GET_USER_NOTIFICATIONS_FAILED = 'GET_USER_NOTIFICATIONS_FAILED';\n\nexport const ACCEPT_FRIEND_REQUEST_INIT = 'ACCEPT_FRIEND_REQUEST';\nexport const ACCEPT_FRIEND_REQUEST_SUCCESS = 'ACCEPT_FRIEND_REQUEST_SUCCESS';\nexport const ACCEPT_FRIEND_REQUEST_FAILED = 'ACCEPT_FRIEND_REQUEST_FAILED';\n\n// Remove notification\nexport const REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION';\n\n// Mark Notification as read\nexport const READ_ALL_NOTIFICATIONS_SUCCESS = 'READ_ALL_NOTIFICATIONS_SUCCESS';\nexport const READ_ALL_NOTIFICATIONS_FAILED = 'READ_ALL_NOTIFICATIONS_FAILED';\n\n// UI\n\nexport const SHOW_CREATE_POST = 'SHOW_CREATE_POST';\n\nexport const UPDATE_USER_INIT = 'UPDATE_USER_INIT';\nexport const UPDATE_USER_SUCCESS = 'UPDATE_USER_SUCCESS';\nexport const UPDATE_USER_FAILED = 'UPDATE_USER_FAILED';\n","import { useDisclosure } from '@chakra-ui/react';\nimport React from 'react';\n\nexport const UIContext = React.createContext<any | undefined>(undefined);\n\nconst UIContextProvider = ({ children }: any) => {\n\tconst {\n\t\tisOpen: isCreatePostOpen,\n\t\tonOpen: onCreatePostOpen,\n\t\tonClose: onCreatePostClose,\n\t} = useDisclosure();\n\tconst {\n\t\tisOpen: isCreateGroupOpen,\n\t\tonOpen: onCreateGroupOpen,\n\t\tonClose: onCreateGroupClose,\n\t} = useDisclosure();\n\n\tconst {\n\t\tisOpen: isNotificationsOpen,\n\t\tonOpen: onNotificationsOpen,\n\t\tonClose: onNotificationsClose,\n\t} = useDisclosure();\n\n\tconst value = {\n\t\tisCreatePostOpen,\n\t\tonCreatePostOpen,\n\t\tonCreatePostClose,\n\t\tisCreateGroupOpen,\n\t\tonCreateGroupOpen,\n\t\tonCreateGroupClose,\n\t\tisNotificationsOpen,\n\t\tonNotificationsOpen,\n\t\tonNotificationsClose,\n\t};\n\n\treturn (\n\t\t<UIContext.Provider value={{ ...value }}>{children}</UIContext.Provider>\n\t);\n};\n\nexport default UIContextProvider;\n","import { Notification } from '../../config/types';\nimport * as actionTypes from '../actionTypes';\n\ninterface StateProps {\n\tnotifications: Notification[];\n\tnotificationsInit: boolean;\n\tnotificationsError: null | any;\n}\n\nexport const initialState: StateProps = {\n\tnotifications: [],\n\tnotificationsInit: false,\n\tnotificationsError: null,\n};\n\nconst reducer = (state: any = initialState, action: any) => {\n\tswitch (action.type) {\n\t\tcase actionTypes.GET_USER_NOTIFICATIONS_INIT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tnotificationsInit: true,\n\t\t\t\tnotificationsError: null,\n\t\t\t};\n\t\tcase actionTypes.GET_USER_NOTIFICATIONS_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tnotificationsInit: false,\n\t\t\t\tnotifications: action.notifications,\n\t\t\t};\n\n\t\tcase actionTypes.GET_USER_NOTIFICATIONS_FAILED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tnotificationsInit: false,\n\t\t\t\tnotificationsError: action.error,\n\t\t\t};\n\n\t\tcase actionTypes.REMOVE_NOTIFICATION:\n\t\t\tlet newNotifications = [] as any;\n\t\t\tif (state.notifications && state.notifications.length > 0) {\n\t\t\t\tnewNotifications = [...state.notifications];\n\t\t\t}\n\n\t\t\tnewNotifications = newNotifications.filter(\n\t\t\t\t(el: any) => el._id !== action.notification\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tnotifications: newNotifications,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default reducer;\n","import React, { useContext, useEffect } from 'react';\n\nimport { SocketContext } from './SocketContext';\n\nimport reducer, { initialState } from '../reducers/notitficationReducers';\nimport * as actionTypes from '../actionTypes';\nimport axios from 'axios';\nimport { AuthContext } from './AuthContext';\nimport { Notification as NotificationType } from './../../config/types';\n\nexport const NotificationContext = React.createContext<Partial<any>>(\n\tinitialState\n);\n\nconst NotificationContextProvider = ({ children }: any) => {\n\tconst io = useContext(SocketContext);\n\n\tconst { user } = useContext<any>(AuthContext);\n\n\tconst [notificationState, dispatch] = React.useReducer<\n\t\tReact.Reducer<any, any>\n\t>(reducer, initialState);\n\n\tuseEffect(() => {\n\t\tif (user && io) {\n\t\t\tio.on(`notifications-${user._id}`, async (data: NotificationType) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: actionTypes.GET_USER_NOTIFICATIONS_SUCCESS,\n\t\t\t\t\tnotifications: [...notificationState.notifications, data],\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [io, user, notificationState]);\n\n\tuseEffect(() => {\n\t\t// Get User Notifications\n\t\tif (user) {\n\t\t\tconst getUserNotifications = async () => {\n\t\t\t\tdispatch({ type: actionTypes.GET_USER_NOTIFICATIONS_INIT });\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await axios({\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '/api/v1/notifications',\n\t\t\t\t\t});\n\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: actionTypes.GET_USER_NOTIFICATIONS_SUCCESS,\n\t\t\t\t\t\tnotifications: res.data.notifications,\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tdispatch({ type: actionTypes.GET_USER_NOTIFICATIONS_FAILED, error });\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tgetUserNotifications();\n\t\t}\n\t}, [user]);\n\n\tconst removeNotification = (notification: string) => {\n\t\treturn dispatch({\n\t\t\ttype: actionTypes.REMOVE_NOTIFICATION,\n\t\t\tnotification,\n\t\t});\n\t};\n\n\tconst readAllNotifications = async (notification: string) => {\n\t\ttry {\n\t\t\tconst res = await axios({\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\turl: '/api/v1/notifications/markAsRead',\n\t\t\t});\n\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.GET_USER_NOTIFICATIONS_SUCCESS,\n\t\t\t\tnotifications: res.data.notifications,\n\t\t\t});\n\t\t} catch (err) {}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<NotificationContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\t...notificationState,\n\t\t\t\t\tremoveNotification,\n\t\t\t\t\treadAllNotifications,\n\t\t\t\t}}>\n\t\t\t\t{children}\n\t\t\t</NotificationContext.Provider>\n\t\t</>\n\t);\n};\n\nexport default NotificationContextProvider;\n","import { Box, Spinner } from '@chakra-ui/react';\nimport React from 'react';\n\nconst Loader = () => {\n\treturn (\n\t\t<Box d='flex' alignItems='center' justifyContent='center' h='90vh'>\n\t\t\t<Spinner\n\t\t\t\tboxSize='100px'\n\t\t\t\tthickness='6px'\n\t\t\t\tspeed='0.65s'\n\t\t\t\temptyColor='gray.200'\n\t\t\t\tcolor='primary.600'\n\t\t\t/>\n\t\t</Box>\n\t);\n};\n\nexport default Loader;\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\n\nimport { SocketContext } from './SocketContext';\n\nimport { AuthContext } from './AuthContext';\nimport { Group, Notification, User } from '../../config/types';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\n\nexport const SearchContext = React.createContext<Partial<any>>({});\n\nconst SearchContextProvider = ({ children }: any) => {\n\tconst io = useContext(SocketContext);\n\tconst { user, getUserGroups } = useContext<any>(AuthContext);\n\tconst [searchText, setSearchText] = useState<string>('');\n\tconst [groups, setGroups] = useState<Group[]>([]);\n\tconst [people, setPeople] = useState<User[]>([]);\n\tconst [to, setTo] = useState<string>();\n\n\tconst updateGroup = useCallback(\n\t\t(groupId: string) => {\n\t\t\tconst newGroups = [...groups];\n\t\t\tconst updatedGroups = newGroups.filter((el) => el._id !== groupId);\n\t\t\tsetGroups(updatedGroups);\n\t\t},\n\t\t[groups]\n\t);\n\n\tconst updateGroupRequest = (groupId: string, userId: string) => {\n\t\tconst newUpdatedRequests = [...groups];\n\t\tconst groupIndex = newUpdatedRequests.findIndex((el) => el._id === groupId);\n\t\tnewUpdatedRequests[groupIndex].requests?.push(userId);\n\t\tsetGroups(newUpdatedRequests);\n\t};\n\n\tconst { pathname } = useLocation();\n\n\tuseEffect(() => {\n\t\tif (pathname.startsWith('/app') || pathname.startsWith('/profile')) {\n\t\t\tconst findGroups = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await axios({\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '/api/v1/groups/new',\n\t\t\t\t\t});\n\n\t\t\t\t\tsetGroups(res.data.groups);\n\t\t\t\t} catch (err) {}\n\t\t\t};\n\n\t\t\tfindGroups();\n\t\t}\n\t}, [pathname]);\n\n\tuseEffect(() => {\n\t\tif (pathname.startsWith('/app') || pathname.startsWith('/profile')) {\n\t\t\tconst findFriends = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await axios({\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '/api/v1/users/find-friends',\n\t\t\t\t\t});\n\n\t\t\t\t\tsetPeople(res.data.users);\n\t\t\t\t} catch (err) {}\n\t\t\t};\n\n\t\t\tfindFriends();\n\t\t}\n\t}, [pathname]);\n\n\tuseEffect(() => {\n\t\tif (user && to) {\n\t\t\tio.emit(`${to}`, {\n\t\t\t\tuserId: user._id,\n\t\t\t\tname: searchText,\n\t\t\t\tuserFriends: user.friends,\n\t\t\t});\n\t\t}\n\t}, [searchText, user, io, to]);\n\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\tio.on(`getGroups-${user._id}`, (data: Group[]) => {\n\t\t\t\tif (data) {\n\t\t\t\t\tsetGroups(data);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tio.on(`getPeople-${user._id}`, (data: User[]) => {\n\t\t\t\tif (data) {\n\t\t\t\t\tsetPeople(data);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, [io, user]);\n\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\tio.on(`notifications-${user._id}`, (data: Notification) => {\n\t\t\t\tconst newPeople = [...people];\n\t\t\t\tif (data.type === 'friendRequestAccepted') {\n\t\t\t\t\tconst updatedPeople = newPeople.filter(\n\t\t\t\t\t\t(el) => el._id !== data.sender._id\n\t\t\t\t\t);\n\t\t\t\t\tsetPeople(updatedPeople);\n\t\t\t\t}\n\n\t\t\t\tif (data.type === 'joinGroupRequestAccepted') {\n\t\t\t\t\tupdateGroup(data.group._id);\n\t\t\t\t\tgetUserGroups();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, [io, user, people, updateGroup, getUserGroups]);\n\n\tconst handleSearchTextChange = (value: string, to: string) => {\n\t\tsetSearchText(value);\n\t\tsetTo(to);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<SearchContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\tsearchText,\n\t\t\t\t\tsearchGroups: groups,\n\t\t\t\t\tsearchPeople: people,\n\t\t\t\t\thandleSearchTextChange,\n\t\t\t\t\tupdateGroup,\n\t\t\t\t\tupdateGroupRequest,\n\t\t\t\t}}>\n\t\t\t\t{children}\n\t\t\t</SearchContext.Provider>\n\t\t</>\n\t);\n};\n\nexport default SearchContextProvider;\n"],"sourceRoot":""}