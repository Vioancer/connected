{"version":3,"sources":["../../../src/object.ts","../../../src/text.tsx","../../../src/dom.ts","../../../src/flex.tsx","../../../src/heading.tsx","../../../src/ArrowBack.tsx","app/pages/error/Error.tsx"],"names":["fn","cache","memoize","key","path","index","obj","filterUndefined","object","result","Object","value","objectFilter","val","objectKeys","Text","forwardRef","styles","useStyleConfig","rest","omitThemingProps","aliasedProps","textAlign","props","textDecoration","textTransform","casing","ref","className","cx","__css","window","classNames","Flex","shrink","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","Heading","ArrowBackIcon","createIcon","d","displayName","Error","user","useContext","AuthContext","history","useHistory","direction","minH","color","mb","size","leftIcon","onClick","replace","colorScheme","variant"],"mappings":"4LAyEwBA,YACtB,IAAMC,EAAQ,IAAd,QA2ByBC,EAnDpB,SAAa,EAAb,OAML,IAAMC,EAAsB,kBAATC,EAAoBA,QAA3B,KAA6C,CAAzD,GAEA,IAAKC,EAAL,EAAgBA,EAAQF,EAAxB,QACE,EADkCE,GAApC,EAEEC,EAAMA,EAAIH,EAAVG,IAGF,YAAOA,QAAP,KAyEK,IAAMC,EAAmBC,YAAD,OAdxB,cACL,IAAMC,EAAN,GAUA,OARAC,wBAA6BP,YAC3B,IAAMQ,EAAQH,EAAd,GACmBR,EAAGW,EAAOR,EAA7B,KAEEM,WAIJ,EAIAG,CAAaJ,GAASK,YAAD,OAASA,eADzB,IACyCA,MAEnCC,EAA8BR,YAAjB,OACvBI,YADI,K,0VCxGA,IAAMK,EAAOC,aAA2B,cAC7C,IAAMC,EAASC,YAAe,OAA9B,GACiDC,E,oIAAjD,CAA0DC,YAA1D,gDAIMC,EAAed,YAAgB,CACnCe,UAAWC,EADwB,MAEnCC,eAAgBD,EAFmB,WAGnCE,cAAeF,EAAMG,SAGvB,OACE,gBAAC,IAAD,KACEC,IADF,EAEEC,UAAWC,YAAG,cAAeN,EAAhB,YAFf,KAKEO,MAAOb,QAKT,EAAJ,IACEF,uB,iCCxDF,kCAYsB,qBAAXgB,SACPA,OADA,UAEAA,gBAHF,cAwBK,IAMMF,EAAK,sCAAIG,EAAJ,yBAAIA,EAAJ,uBAA0BA,uBAA1B,O,uTCmBX,IAAMC,EAAOjB,aAA6B,cAAgB,IACzD,EAAN,EAAM,YAAN,EAAM,QAAN,EAAM,UAAN,EAAM,OAAN,EAAM,QAAN,EAAM,KAOJkB,EAPF,EAOEA,OAPF,E,oIAAA,mEAWMjB,EAAS,CACbkB,QADa,OAEbC,cAFa,EAGbC,WAHa,EAIbC,eAJa,EAKbC,SALa,EAMbC,UANa,EAObC,SAPa,EAQbC,WAAYR,GAGd,OAAO,gBAAC,IAAD,OAAYP,IAAZ,EAAsBG,MAAOb,GAApC,OAGE,EAAJ,IACEgB,uB,iVC7EK,IAAMU,EAAU3B,aAA+B,cACpD,IAAMC,EAASC,YAAe,UAA9B,GACsBC,E,oIAAtB,CAA+BC,YAA/B,kBAEA,OACE,gBAAC,IAAD,MACEO,IADF,EAEEC,UAAWC,YAAG,iBAAkBN,EAAnB,YAFf,GAIEO,MAAOb,QAKT,EAAJ,IACE0B,0B,gGC1BWC,EAAgBC,YAAW,CACtCC,EADsC,+DAEtCC,YAAa,kB,uBCiCAC,UA/BS,WAAO,IACtBC,EAASC,qBAAWC,KAApBF,KACFG,EAAUC,cAEhB,OACC,eAAC,IAAD,CACCC,UAAU,SACVC,KAAK,OACLlB,WAAW,SACXC,eAAe,SAJhB,UAKC,cAAC,IAAD,CAASkB,MAAM,UAAUC,GAAI,EAAGC,KAAK,MAArC,4CAGA,cAAC,IAAD,CAAMD,GAAI,GAAV,oCACA,cAAC,IAAD,CACCE,SAAU,cAACf,EAAD,IACVgB,QAAS,WACJX,EACHG,EAAQS,QAAQ,eAEhBT,EAAQS,QAAQ,WAGlBC,YAAY,OACZC,QAAQ,UAVT","file":"static/js/25.98f97905.chunk.js","sourcesContent":["import type { Dict, Omit } from \"./types\"\n\nexport { default as mergeWith } from \"lodash.mergewith\"\nexport { default as objectAssign } from \"object-assign\"\n\nexport function omit<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as K)) return\n    result[key] = object[key]\n  })\n\n  return result as Omit<T, K>\n}\n\nexport function pick<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result = {} as { [P in K]: T[P] }\n\n  keys.forEach((key) => {\n    if (key in object) {\n      result[key] = object[key]\n    }\n  })\n\n  return result\n}\n\nexport function split<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const picked: Dict = {}\n  const omitted: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as T[K])) {\n      picked[key] = object[key]\n    } else {\n      omitted[key] = object[key]\n    }\n  })\n\n  return [picked, omitted] as [{ [P in K]: T[P] }, Omit<T, K>]\n}\n\n/**\n * Get value from a deeply nested object using a string path.\n * Memoizes the value.\n * @param obj - the object\n * @param path - the string path\n * @param def  - the fallback value\n */\nexport function get(\n  obj: object,\n  path: string | number,\n  fallback?: any,\n  index?: number,\n) {\n  const key = typeof path === \"string\" ? path.split(\".\") : [path]\n\n  for (index = 0; index < key.length; index += 1) {\n    if (!obj) break\n    obj = obj[key[index]]\n  }\n\n  return obj === undefined ? fallback : obj\n}\n\ntype Get = (\n  obj: Readonly<object>,\n  path: string | number,\n  fallback?: any,\n  index?: number,\n) => any\n\nexport const memoize = (fn: Get) => {\n  const cache = new WeakMap()\n\n  const memoizedFn: Get = (obj, path, fallback, index) => {\n    if (typeof obj === \"undefined\") {\n      return fn(obj, path, fallback)\n    }\n\n    if (!cache.has(obj)) {\n      cache.set(obj, new Map())\n    }\n\n    const map = cache.get(obj)\n\n    if (map.has(path)) {\n      return map.get(path)\n    }\n\n    const value = fn(obj, path, fallback, index)\n\n    map.set(path, value)\n\n    return value\n  }\n\n  return memoizedFn\n}\n\nexport const memoizedGet = memoize(get)\n\n/**\n * Get value from deeply nested object, based on path\n * It returns the path value if not found in object\n *\n * @param path - the string path or value\n * @param scale - the string path or value\n */\nexport function getWithDefault(path: any, scale: any) {\n  return memoizedGet(scale, path, path)\n}\n\ntype FilterFn<T> = (value: any, key: string, object: T) => boolean\n\n/**\n * Returns the items of an object that meet the condition specified in a callback function.\n *\n * @param object the object to loop through\n * @param fn The filter function\n */\nexport function objectFilter<T extends Dict>(object: T, fn: FilterFn<T>) {\n  const result: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    const value = object[key]\n    const shouldPass = fn(value, key, object)\n    if (shouldPass) {\n      result[key] = value\n    }\n  })\n\n  return result\n}\n\nexport const filterUndefined = (object: Dict) =>\n  objectFilter(object, (val) => val !== null && val !== undefined)\n\nexport const objectKeys = <T extends Dict>(obj: T) =>\n  (Object.keys(obj) as unknown) as (keyof T)[]\n\n/**\n * Object.entries polyfill for Nodev10 compatibility\n */\nexport const fromEntries = <T extends unknown>(entries: [string, any][]) =>\n  entries.reduce((carry, [key, value]) => {\n    carry[key] = value\n    return carry\n  }, {}) as T\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__, filterUndefined } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/docs/typography/text\n */\nexport const Text = forwardRef<TextProps, \"p\">((props, ref) => {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(\n    props,\n  )\n\n  const aliasedProps = filterUndefined({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Text.displayName = \"Text\"\n}\n","import * as React from \"react\"\nimport { Booleanish, EventKeys } from \"./types\"\n\nexport function getOwnerWindow(node?: HTMLElement | null) {\n  return node instanceof Element\n    ? getOwnerDocument(node).defaultView ?? window\n    : window\n}\n\nexport function getOwnerDocument(node?: HTMLElement | null) {\n  return node instanceof Element ? node.ownerDocument ?? document : document\n}\n\nexport function canUseDOM() {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.document &&\n    window.document.createElement\n  )\n}\n\nexport const isBrowser = canUseDOM()\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nexport function normalizeEventKey(event: React.KeyboardEvent) {\n  const { key, keyCode } = event\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0\n\n  const eventKey = isArrowKey ? `Arrow${key}` : key\n\n  return eventKey as EventKeys\n}\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? \"\" : undefined) as Booleanish\n\nexport const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined\n\nexport const cx = (...classNames: any[]) => classNames.filter(Boolean).join(\" \")\n\nexport function getActiveElement(node?: HTMLElement) {\n  const doc = getOwnerDocument(node)\n  return doc?.activeElement as HTMLElement\n}\n\nexport function contains(parent: HTMLElement, child: HTMLElement) {\n  return parent === child || parent.contains(child)\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">((props, ref) => {\n  const {\n    direction,\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Flex.displayName = \"Flex\"\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface HeadingProps extends HTMLChakraProps<\"h2\">, ThemingProps {}\n\nexport const Heading = forwardRef<HeadingProps, \"h2\">((props, ref) => {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Heading.displayName = \"Heading\"\n}\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ArrowBackIcon = createIcon({\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\",\n  displayName: \"ArrowBackIcon\",\n})\n","import { Text, Flex, Heading, Button } from '@chakra-ui/react';\r\nimport { ArrowBackIcon } from '@chakra-ui/icons';\r\nimport React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../store/context/AuthContext';\r\n\r\nconst Error: React.FC = () => {\r\n\tconst { user } = useContext(AuthContext);\r\n\tconst history = useHistory();\r\n\r\n\treturn (\r\n\t\t<Flex\r\n\t\t\tdirection='column'\r\n\t\t\tminH='65vh'\r\n\t\t\talignItems='center'\r\n\t\t\tjustifyContent='center'>\r\n\t\t\t<Heading color='red.500' mb={6} size='2xl'>\r\n\t\t\t\tOops!! Something went wrong :(\r\n\t\t\t</Heading>\r\n\t\t\t<Text mb={10}>Click Below to go back</Text>\r\n\t\t\t<Button\r\n\t\t\t\tleftIcon={<ArrowBackIcon />}\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tif (user) {\r\n\t\t\t\t\t\thistory.replace('/app/public');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\thistory.replace('/login');\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t\tcolorScheme='gray'\r\n\t\t\t\tvariant='outline'>\r\n\t\t\t\tBack\r\n\t\t\t</Button>\r\n\t\t</Flex>\r\n\t);\r\n};\r\n\r\nexport default Error;\r\n"],"sourceRoot":""}