{"version":3,"sources":["../../../src/grid.tsx","../../../src/heading.tsx","../../../src/responsive.ts","assets/images/home.svg","app/pages/home/styles.ts","app/pages/home/Home.tsx"],"names":["Grid","forwardRef","templateColumns","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","ref","__css","spanFn","span","mapResponsive","value","GridItem","rowStart","filterUndefined","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","rowEnd","Heading","useStyleConfig","rest","omitThemingProps","className","cx","props","Object","prop","isArray","item","mapper","isObject","object","result","Wrapper","minH","justifyItems","templateRows","md","sm","rowGap","bgImage","ImageBg","bgRepeat","bgSize","base","lg","bgPosition","textAlign","justifySelf","alignSelf","textTransform","colStart","colEnd","mb","HeadingMain","as","fontSize","xl","fontWeight","HeadingSub","color","BtnCta","w","LoginBtn","size","variant","borderColor","borderWidth","colorScheme","RegisterBtn","Home","push","useHistory","homeStyles","onClick","pathname"],"mappings":"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","file":"static/js/30.fa422e0d.chunk.js","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">((props, ref) => {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">((props, ref) => {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface HeadingProps extends HTMLChakraProps<\"h2\">, ThemingProps {}\n\nexport const Heading = forwardRef<HeadingProps, \"h2\">((props, ref) => {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Heading.displayName = \"Heading\"\n}\n","import { isArray, isObject } from \"./assertion\"\nimport { Dict } from \"./types\"\nimport { objectKeys } from \"./object\"\nimport { getLastItem } from \"./array\"\n\nexport const breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n","export default __webpack_public_path__ + \"static/media/home.92a17592.svg\";","import ImageBg from '../../../assets/images/home.svg';\n\nexport const Wrapper: any = {\n\tminH: 'calc(100vh - 6rem)',\n\tjustifyItems: 'center',\n\ttemplateRows: {\n\t\tmd: '1.2fr 1fr',\n\t\tsm: '.75fr 1fr',\n\t},\n\ttemplateColumns: 'repeat(12, 1fr)',\n\trowGap: {\n\t\tmd: '3rem',\n\t\tsm: 0,\n\t},\n\tbgImage: `url(${ImageBg})`,\n\tbgRepeat: 'no-repeat',\n\tbgSize: {\n\t\tbase: '50rem auto',\n\t\tlg: '47rem auto',\n\t\tsm: '30rem auto',\n\t},\n\tbgPosition: {\n\t\tbase: 'right 10rem',\n\t\tlg: 'right 14rem',\n\t\tmd: 'right bottom',\n\t\tsm: 'right bottom',\n\t},\n};\n\nexport const Heading: any = {\n\ttextAlign: {\n\t\tmd: 'left',\n\t\tsm: 'center',\n\t},\n\tjustifySelf: {\n\t\tmd: 'start',\n\t\tsm: 'center',\n\t},\n\talignSelf: {\n\t\tsm: 'center',\n\t\tmd: 'end',\n\t},\n\ttextTransform: 'uppercase',\n\trowStart: 1,\n\trowEnd: 2,\n\tcolStart: {\n\t\tmd: 2,\n\t\tsm: 1,\n\t},\n\tcolEnd: {\n\t\tlg: 7,\n\t\tmd: -1,\n\t\tsm: -1,\n\t},\n\tmb: 5,\n};\n\nexport const HeadingMain: any = {\n\tas: 'h1',\n\tmb: 3,\n\tfontSize: {\n\t\tsm: '3rem',\n\t\tmd: '4rem',\n\t\txl: '6rem',\n\t},\n\tfontWeight: 400,\n};\n\nexport const HeadingSub: any = {\n\tas: 'h1',\n\tfontSize: {\n\t\tsm: '3rem',\n\t\tmd: '5rem',\n\t},\n\tfontWeight: 400,\n\tcolor: 'primary.500',\n};\n\nexport const BtnCta: any = {\n\titem: {\n\t\talignSelf: {\n\t\t\tmd: 'start',\n\t\t},\n\t\trowStart: 2,\n\t\trowEnd: -1,\n\t\tcolStart: {\n\t\t\tlg: 2,\n\t\t\tmd: 2,\n\t\t\tsm: 1,\n\t\t},\n\t\tcolEnd: {\n\t\t\tlg: 6,\n\t\t\tmd: 8,\n\t\t\tsm: -1,\n\t\t},\n\t\tw: '100%',\n\t},\n\n\titemGrid: {\n\t\tw: {\n\t\t\tsm: '100%',\n\t\t\tlg: '100%',\n\t\t},\n\t\ttemplateColumns: 'repeat(2, 1fr)',\n\t\tjustifyItems: {\n\t\t\tsm: 'center',\n\t\t\tmd: 'start',\n\t\t},\n\t},\n};\n\nexport const LoginBtn: any = {\n\ttextTransform: 'uppercase',\n\tw: {\n\t\tsm: '8rem',\n\t},\n\tsize: 'lg',\n\tvariant: 'outline',\n\tborderColor: 'gray',\n\tborderWidth: '2px',\n\tcolorScheme: 'gray',\n};\n\nexport const RegisterBtn: any = {\n\ttextTransform: 'uppercase',\n\tsize: 'lg',\n\tw: {\n\t\tsm: '8rem',\n\t},\n\tcolorScheme: 'primary',\n\tvariant: 'solid',\n};\n\nexport const Svg: any = {\n\talignself: 'center',\n\tjustifySelf: 'center',\n\twidth: '50rem',\n\theight: '50rem',\n\trowStart: 1,\n\trowEnd: 12,\n\tcolStart: 8,\n\tcolEnd: 12,\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Grid, Button, GridItem, Heading } from '@chakra-ui/react';\n\nimport * as homeStyles from './styles';\n\nconst Home: React.FC = () => {\n\tconst { push } = useHistory();\n\n\treturn (\n\t\t<Grid {...homeStyles.Wrapper}>\n\t\t\t<GridItem {...homeStyles.Heading}>\n\t\t\t\t<Heading {...homeStyles.HeadingMain}>Always Stay</Heading>\n\t\t\t\t<Heading {...homeStyles.HeadingSub}>connected</Heading>\n\t\t\t</GridItem>\n\n\t\t\t<GridItem {...homeStyles.BtnCta.item}>\n\t\t\t\t<Grid {...homeStyles.BtnCta.itemGrid}>\n\t\t\t\t\t<Button\n\t\t\t\t\t\t{...homeStyles.LoginBtn}\n\t\t\t\t\t\tonClick={() => push({ pathname: '/auth/login' })}>\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\t{...homeStyles.RegisterBtn}\n\t\t\t\t\t\tonClick={() => push({ pathname: '/auth/register' })}>\n\t\t\t\t\t\tRegister\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</GridItem>\n\t\t</Grid>\n\t);\n};\n\nexport default Home;\n"],"sourceRoot":""}