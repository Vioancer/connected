{"version":3,"sources":["app/hooks/useAxios.tsx","app/pages/app/containers/Public.tsx"],"names":["useAxios","url","method","data","useState","loading","setLoading","serverData","setServerData","error","setError","useEffect","a","axios","res","getData","Public","posts","setPosts","io","useContext","SocketContext","length","on","prevProps","unshift","postIndex","findIndex","el","_id","Array","fill","map","_","i","PostSkeleton","to","p","md","sm","post","Post"],"mappings":"gNAuCeA,EAhC0C,SACxDC,GAGK,IAFLC,EAEI,uDAFK,MACTC,EACI,yCAC0BC,oBAAS,GADnC,mBACGC,EADH,KACYC,EADZ,OAEgCF,mBAAS,MAFzC,mBAEGG,EAFH,KAEeC,EAFf,OAGsBJ,mBAAS,MAH/B,mBAGGK,EAHH,KAGUC,EAHV,KAyBJ,OApBAC,qBAAU,YACI,uCAAG,4BAAAC,EAAA,6DACfN,GAAW,GADI,kBAGmBO,IAAM,CACtCX,SACAD,MACAE,SANa,OAGRW,EAHQ,OASdN,EAAcM,EAAIX,MATJ,gDAWdO,EAASD,GAXK,QAafH,GAAW,GAbI,yDAAH,qDAgBbS,KACE,CAACb,EAAQD,EAAKE,EAAMM,IAEhB,CAAEJ,UAASE,aAAYE,U,2BCqChBO,UA9DU,WAAO,IAAD,EACShB,EAAS,iBAAxCK,EADsB,EACtBA,QAASE,EADa,EACbA,WAAYE,EADC,EACDA,MADC,EAEJL,mBAAsB,IAFlB,mBAEvBa,EAFuB,KAEhBC,EAFgB,KAGxBC,EAAKC,qBAAWC,KA6BtB,OA3BAV,qBAAU,YACJN,GAAWE,GAAcA,EAAWU,MAAMK,OAAS,GACvDJ,EAASX,EAAWU,SAEnB,CAACV,EAAYF,IAEhBM,qBAAU,WAETQ,EAAGI,GAAG,WAAW,SAACpB,GACjBe,GAAS,SAACM,GACT,IAAMP,EAAK,YAAOO,GAElB,OADAP,EAAMQ,QAAQtB,GACPc,QAKTE,EAAGI,GAAG,eAAe,SAACpB,GACrBe,GAAS,SAACM,GACT,IAAIP,EAAK,YAAOO,GACVE,EAAYT,EAAMU,WAAU,SAACC,GAAD,OAAQA,EAAGC,MAAQ1B,EAAK0B,OAE1D,OADAZ,EAAMS,GAAN,eAAwBvB,GACjBc,UAGP,CAACE,IAEAd,EAEF,mCACEyB,MAAM,IACLC,KAAK,GACLC,KAAI,SAACC,EAAGC,GACR,OAAO,cAACC,EAAA,EAAD,GAAmBD,QAM3BzB,EACI,cAAC,IAAD,CAAU2B,GAAG,SAIpB,cAAC,IAAD,CACCC,EAAG,CACFC,GAAI,GACJC,GAAI,GAHN,SAKEtB,GACAA,EAAMe,KAAI,SAACQ,GACV,OAAO,cAACC,EAAA,EAAD,CAAMD,KAAMA,GAAWA,EAAKX","file":"static/js/19.3065675c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\n\nconst useAxios: (\n\turl: string,\n\tmethod?: 'get' | 'post' | 'patch' | 'delete',\n\tdata?: any\n) => { loading: boolean; serverData: any; error: any } = (\n\turl,\n\tmethod = 'get',\n\tdata\n) => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [serverData, setServerData] = useState(null);\n\tconst [error, setError] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst getData = async () => {\n\t\t\tsetLoading(true);\n\t\t\ttry {\n\t\t\t\tconst res: AxiosResponse = await axios({\n\t\t\t\t\tmethod,\n\t\t\t\t\turl,\n\t\t\t\t\tdata,\n\t\t\t\t});\n\n\t\t\t\tsetServerData(res.data);\n\t\t\t} catch (err) {\n\t\t\t\tsetError(error);\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t};\n\n\t\tgetData();\n\t}, [method, url, data, error]);\n\n\treturn { loading, serverData, error };\n};\n\nexport default useAxios;\n","import { Box } from '@chakra-ui/react';\nimport React, { useContext, useState } from 'react';\nimport { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport useAxios from '../../../hooks/useAxios';\nimport { SocketContext } from '../../../store/context/SocketContext';\nimport Post from '../components/Post';\nimport PostSkeleton from '../components/PostSkeleton';\n\nimport { Post as PostProps } from './../../../config/types';\n\nconst Public: React.FC = () => {\n\tconst { loading, serverData, error } = useAxios('/api/v1/posts');\n\tconst [posts, setPosts] = useState<PostProps[]>([]);\n\tconst io = useContext(SocketContext);\n\n\tuseEffect(() => {\n\t\tif (!loading && serverData && serverData.posts.length > 0) {\n\t\t\tsetPosts(serverData.posts);\n\t\t}\n\t}, [serverData, loading]);\n\n\tuseEffect(() => {\n\t\t// new post\n\t\tio.on('newPost', (data: PostProps) => {\n\t\t\tsetPosts((prevProps: PostProps[]) => {\n\t\t\t\tconst posts = [...prevProps];\n\t\t\t\tposts.unshift(data);\n\t\t\t\treturn posts;\n\t\t\t});\n\t\t});\n\n\t\t// update post\n\t\tio.on('updatedPost', (data: PostProps) => {\n\t\t\tsetPosts((prevProps: PostProps[]) => {\n\t\t\t\tlet posts = [...prevProps];\n\t\t\t\tconst postIndex = posts.findIndex((el) => el._id === data._id);\n\t\t\t\tposts[postIndex] = { ...data };\n\t\t\t\treturn posts;\n\t\t\t});\n\t\t});\n\t}, [io]);\n\n\tif (loading) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{Array(10)\n\t\t\t\t\t.fill(0)\n\t\t\t\t\t.map((_, i) => {\n\t\t\t\t\t\treturn <PostSkeleton key={i} />;\n\t\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t}\n\n\tif (error) {\n\t\treturn <Redirect to='/404' />;\n\t}\n\n\treturn (\n\t\t<Box\n\t\t\tp={{\n\t\t\t\tmd: 10,\n\t\t\t\tsm: 4,\n\t\t\t}}>\n\t\t\t{posts &&\n\t\t\t\tposts.map((post: PostProps) => {\n\t\t\t\t\treturn <Post post={post} key={post._id} />;\n\t\t\t\t})}\n\t\t</Box>\n\t);\n};\n\nexport default Public;\n"],"sourceRoot":""}