{"version":3,"sources":["app/hooks/useAlert.tsx","app/components/Alert/BaseAlert.tsx","../../../src/flex.tsx","../../../src/use-image.ts","../../../src/heading.tsx","../../../src/dom.ts","../../../src/assertion.ts","../../../src/avatar.tsx","app/pages/app/containers/FriendProfile.tsx"],"names":["useAlert","useDisclosure","isOpen","onOpen","onClose","useState","alertDetails","setAlertDetails","useEffect","timer","setTimeout","clearTimeout","setAlert","status","message","isAlertOpen","onAlertClose","BaseAlert","variant","borderRadius","pos","top","xl","md","sm","m","zIndex","left","lg","maxW","Flex","forwardRef","shrink","styles","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","ref","__css","useImage","props","ignoreFallback","setStatus","src","imageRef","useRef","load","useCallback","flush","img","event","onLoad","error","onError","crossOrigin","srcSet","sizes","useSafeLayoutEffect","Heading","useStyleConfig","rest","omitThemingProps","className","cx","window","classNames","__DEV__","process","initials","name","firstName","lastName","AvatarName","getInitials","useStyles","aria-label","label","DefaultIcon","viewBox","color","width","height","fill","d","baseStyle","textAlign","textTransform","fontWeight","position","Avatar","useMultiStyleConfig","icon","borderColor","avatarStyles","borderWidth","showBorder","undefined","value","loading","AvatarImage","role","alt","objectFit","FriendProfile","friendId","useParams","useContext","AuthContext","user","updateUser","history","useHistory","userFriend","setUserFriend","colorMode","useColorMode","friends","length","replace","friend","find","el","_id","unFriend","a","axios","url","method","data","res","response","mt","bgGradient","direction","h","photo","boxSize","mb","fullName","my","fontSize","email","createdAt","onClick","colorScheme"],"mappings":"oIAqCeA,IAjCE,WAAO,IAAD,EACcC,cAA5BC,EADc,EACdA,OAAQC,EADM,EACNA,OAAQC,EADF,EACEA,QADF,EAEkBC,mBAA4B,MAF9C,mBAEfC,EAFe,KAEDC,EAFC,KAItBC,qBAAU,WACT,GAAIF,EAAc,CACjB,IAAMG,EAAQC,YAAW,WACxBN,MACE,MAEH,OAAO,kBAAMO,aAAaF,OAEzB,CAACH,EAAcF,IAalB,MAAO,CACNQ,SAZgB,WAGX,IAFLC,EAEI,uDAF+C,OACnDC,EACI,uCACJP,EAAgB,CACfM,SACAC,YAEDX,KAKAY,YAAab,EACbc,aAAcZ,EACdE,aAAcA,K,iECSDW,UAlCoB,SAAC,GAAsB,IAApBX,EAAmB,EAAnBA,aACrC,OACC,eAAC,IAAD,CACCY,QAAQ,QACRC,aAAa,MACbC,IAAI,WACJC,IAAK,CACJ,SAAU,MACVC,GAAI,KACJC,GAAI,KACJC,GAAI,OAELC,EAAG,CACFD,GAAI,UAELE,OAAO,MACPC,KAAM,CACL,SAAU,MACVL,GAAI,MACJM,GAAI,MACJL,GAAI,MACJC,GAAI,MAELK,KAAM,CACLN,GAAI,QACJC,GAAI,QAELX,OAAM,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAcO,OAzBvB,UA0BC,cAAC,IAAD,IACA,cAAC,IAAD,iBAAaP,QAAb,IAAaA,OAAb,EAAaA,EAAcQ,e,sTC0BvB,IAAMgB,EAAOC,aAA6B,cAAgB,IACzD,EAAN,EAAM,YAAN,EAAM,QAAN,EAAM,UAAN,EAAM,OAAN,EAAM,QAAN,EAAM,KAOJC,EAPF,EAOEA,OAPF,E,oIAAA,mEAWMC,EAAS,CACbC,QADa,OAEbC,cAFa,EAGbC,WAHa,EAIbC,eAJa,EAKbC,SALa,EAMbC,UANa,EAObC,SAPa,EAQbC,WAAYT,GAGd,OAAO,gBAAC,IAAD,OAAYU,IAAZ,EAAsBC,MAAOV,GAApC,OAGE,EAAJ,IACEH,uB,6FC7BK,SAASc,EAASC,GAAsB,IACvC,EAAN,EAAM,MAAN,EAAM,SAAN,EAAM,SAAN,EAAM,UAAN,EAAM,cAAN,EAAM,MAOJC,EAPF,EAOEA,eAR2C,EAWjBzC,mBAA5B,WAX6C,mBAWvC,EAXuC,KAWvC,EAXuC,KAa7CG,qBAAU,WACRuC,EAAUC,EAAM,UAAhBD,aACC,CAFHvC,IAIA,IAAMyC,EAAWC,mBAEXC,EAAOC,uBAAY,WACvB,MAEAC,IAEA,IAAMC,EAAM,IAAZ,MAEAA,QAEA,IACEA,iBAGF,IACEA,YAGF,IACEA,WAGFA,SAAcC,YACZF,IACAN,YACAS,eAEFF,UAAeG,YACbJ,IACAN,YACAW,eAGFT,eACC,CAACD,EAAKW,EAAaC,EAAQC,EAAOL,EAjCrC,IAmCMH,EAAQ,WACRJ,EAAJ,UACEA,sBACAA,uBACAA,iBAuBJ,OAnBAa,aAAoB,WAKlB,MAKA,MAHA,YAAIjD,GACFsC,IAEK,WACLE,OAED,CAACxC,EAAQsC,EAbZW,IAmBOhB,EAAiB,SAAxB,I,gVCjIK,IAAMiB,EAAUhC,aAA+B,cACpD,IAAME,EAAS+B,YAAe,UAA9B,GACsBC,E,oIAAtB,CAA+BC,YAA/B,kBAEA,OACE,gBAAC,IAAD,MACExB,IADF,EAEEyB,UAAWC,YAAG,iBAAkBvB,EAAnB,YAFf,GAIEF,MAAOV,QAKT,EAAJ,IACE8B,0B,iICboB,qBAAXM,SACPA,OADA,UAEAA,gBAHF,cAwBK,IAMMD,EAAK,sCAAIE,EAAJ,yBAAIA,EAAJ,uBAA0BA,uBAA1B,MCoBX,IAQMC,GAAUC,E,4VCoCvB,SAASC,EAASC,GAAc,MACAA,QAA9B,KAD8B,mBACxB,EADwB,KACxB,EADwB,KAE9B,OAAOC,QACAA,SADAA,GACsBC,SADtBD,GAEHA,SAFJ,GAYF,IAAME,EAAyChC,YAAU,IACjD,EAAN,EAAM,KAAQiC,EAAd,EAAcA,YAAd,8BACM7C,EAAS8C,cAEf,OACE,gBAAC,IAAD,OAAYC,aAAYN,GAAxB,GAAwC/B,MAAOV,EAAOgD,QACnDP,EAAI,MAAGI,OAAH,EAAGA,EAAH,GAFT,OAWII,EAAuCrC,YAAD,OAC1C,gBAAC,IAAD,OACEsC,QADF,cAEEC,MAFF,OAGEC,MAHF,OAIEC,OAAO,QAJT,GAOE,wBACEC,KADF,eAEEC,EAAE,kMAEJ,wBACED,KADF,eAEEC,EAAE,iMAKKC,EAA+B,CAC1CvD,QAD0C,cAE1CE,WAF0C,SAG1CC,eAH0C,SAI1CqD,UAJ0C,SAK1CC,cAL0C,YAM1CC,WAN0C,SAO1CC,SAP0C,WAQ1CpD,WAAY,GAYDqD,EAAS/D,aAAgC,cACpD,IAAME,EAAS8D,YAAoB,SAAnC,GAEA,EAYI7B,YAZJ,GAAM,EAAN,EAAM,MAAN,EAAM,OAAN,EAAM,WAAN,IAIE/C,oBAJF,MAAM,OAAN,EAAM,EAAN,EAAM,QAAN,IAME2D,mBANF,MAAM,EAAN,MAOEkB,YAPF,MAOS,kBAPH,MAAN,EAAM,EAAN,EAAM,UAAN,EAAM,SAUJC,EAVF,EAUEA,YAVF,oHAcMC,EAAkC,EAAH,CACnC/E,eACAgF,YAAaC,EAAa,WAAQC,GAFC,EAIhCpE,EAJL,WAWA,OAJA,IACEiE,iBAIA,gBAAC,IAAD,QACExD,IAAKA,GADP,GAGEyB,UAAWC,EAAG,gBAAiBvB,EAHjC,WAIEF,MAAOuD,IAEP,qBAAgBI,MAAOrE,GACrB,mBACEe,IADF,EAEEuD,QAFF,EAGE7C,QAHF,EAIEoB,YAJF,EAKEJ,KALF,EAMEvD,aANF,EAOE6E,KAAMA,IAfd,OA+BF,IAAMQ,EAA0C,SAAC,GAQ3C,IAR2C,EAQ3C,EAR2C,MAQ3C,EAR2C,UAQ3C,EAR2C,cAQ3C,EAR2C,OAQ3C,EAR2C,eAQ3C,EAR2C,QAQ3C,IADJR,YACI,MADG,wBACH,EAIEnF,EAAS+B,YAAS,CAAEI,MAAKU,YAa/B,OAFsBV,KATtB,WAAkBnC,GAYT6D,EACL,mBACEP,UADF,0BAEEW,YAFF,EAGEJ,KAAMA,IAGR,iBAAyB,CAAE+B,KAAM,QAQnC,gBAAC,IAAD,KACEzD,IADF,EAEE0D,IAFF,EAGEvC,UAHF,qBAIEoC,QAJF,EAKE5D,MAAO,CACL0C,MADK,OAELC,OAFK,OAGLqB,UAHK,QAILxF,oB,4NClLOyF,UAzFiB,WAAO,IAC9BC,EAAaC,cAAbD,SAD6B,EAERE,qBAAWC,KAAhCC,EAF6B,EAE7BA,KAAMC,EAFuB,EAEvBA,WACRC,EAAUC,cAHqB,EAIWpH,cAAxCY,EAJ6B,EAI7BA,SAAUG,EAJmB,EAInBA,YAAaT,EAJM,EAINA,aAJM,EAKDD,mBAAc,MALb,mBAK9BgH,EAL8B,KAKlBC,EALkB,KAM7BC,EAAcC,cAAdD,UAER/G,qBAAU,WACT,GAAIyG,EAAM,CACT,GAAIA,EAAKQ,SAAmC,IAAxBR,EAAKQ,QAAQC,OAChC,OAAOP,EAAQQ,QAAQ,eAExB,IAEMC,EAFW,YAAOX,EAAKQ,SAEFI,MAAK,SAACC,GAAD,OAAQA,EAAGC,MAAQlB,KAEnD,IAAKe,EACJ,OAAOT,EAAQQ,QAAQ,eAGxBL,EAAcM,MAEb,CAACT,EAASF,EAAMJ,IAEnB,IAAMmB,EAAQ,uCAAG,4BAAAC,EAAA,+EAEGC,IAAM,CACvBC,IAAK,yBACLC,OAAQ,OACRC,KAAM,CACLT,OAAQf,KANK,OAETyB,EAFS,OAUfpB,EAAWoB,EAAID,KAAKpB,MACpBrG,EAAS,UAAW,iCAEpBF,YAAW,WACVyG,EAAQQ,QAAQ,iBACd,MAfY,gDAiBf/G,EAAS,QAAS,KAAI2H,SAASF,KAAKvH,SAjBrB,yDAAH,qDAqBd,OACC,qCACEC,GAAe,cAAC,UAAD,CAAWT,aAAcA,IACzC,eAAC,IAAD,CACCkI,GAAI,EACJlD,OAAO,OACPmD,WACe,UAAdlB,EACG,sCACA,6BAEJmB,UAAU,SACVtG,WAAW,SATZ,WAUGiF,GAAc,cAAC,UAAD,IACfA,GACA,eAAC,IAAD,CACCsB,EAAE,OACFtG,eAAe,SACfqG,UAAU,SACVhD,UAAU,SACVtD,WAAW,SALZ,UAMC,cAAC,IAAD,CAAQY,IAAKqE,EAAWuB,MAAOC,QAAQ,QAAQC,GAAI,IACnD,cAAC,IAAD,CAASnD,cAAc,aAAaP,MAAM,cAA1C,SACEiC,EAAW0B,WAEb,eAAC,IAAD,CAAKC,GAAI,GAAItD,UAAU,SAAvB,UACC,eAAC,IAAD,CAASoD,GAAI,EAAG1D,MAAM,WAAW6D,SAAS,KAAKrD,WAAW,MAA1D,oBACSyB,EAAW6B,SAEpB,eAAC,IAAD,CAAM9D,MAAM,WAAW6D,SAAS,KAAhC,uBACY5B,EAAW8B,gBAGxB,cAAC,IAAD,CAAQC,QAASpB,EAAUqB,YAAY,UAAvC","file":"static/js/24.c051f829.chunk.js","sourcesContent":["import { useDisclosure } from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { AlertProps } from '../config/types';\n\nconst useAlert = () => {\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\tconst [alertDetails, setAlertDetails] = useState<null | AlertProps>(null);\n\n\tuseEffect(() => {\n\t\tif (alertDetails) {\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tonClose();\n\t\t\t}, 2500);\n\n\t\t\treturn () => clearTimeout(timer);\n\t\t}\n\t}, [alertDetails, onClose]);\n\n\tconst setAlert = (\n\t\tstatus: 'error' | 'success' | 'info' | 'warning' = 'info',\n\t\tmessage: string\n\t) => {\n\t\tsetAlertDetails({\n\t\t\tstatus,\n\t\t\tmessage,\n\t\t});\n\t\tonOpen();\n\t};\n\n\treturn {\n\t\tsetAlert,\n\t\tisAlertOpen: isOpen,\n\t\tonAlertClose: onClose,\n\t\talertDetails: alertDetails,\n\t};\n};\n\nexport default useAlert;\n","import { Alert, AlertIcon, AlertTitle } from '@chakra-ui/react';\nimport React from 'react';\nimport { AlertProps } from './../../config/types';\n\ninterface Props {\n\talertDetails: AlertProps | null;\n}\n\nconst BaseAlert: React.FC<Props> = ({ alertDetails }) => {\n\treturn (\n\t\t<Alert\n\t\t\tvariant='solid'\n\t\t\tborderRadius='2px'\n\t\t\tpos='absolute'\n\t\t\ttop={{\n\t\t\t\t'1778px': '20%',\n\t\t\t\txl: '8%',\n\t\t\t\tmd: '6%',\n\t\t\t\tsm: '12%',\n\t\t\t}}\n\t\t\tm={{\n\t\t\t\tsm: '0 auto',\n\t\t\t}}\n\t\t\tzIndex='100'\n\t\t\tleft={{\n\t\t\t\t'1778px': '38%',\n\t\t\t\txl: '35%',\n\t\t\t\tlg: '28%',\n\t\t\t\tmd: '20%',\n\t\t\t\tsm: '0%',\n\t\t\t}}\n\t\t\tmaxW={{\n\t\t\t\tmd: '500px',\n\t\t\t\tsm: '100%',\n\t\t\t}}\n\t\t\tstatus={alertDetails?.status}>\n\t\t\t<AlertIcon />\n\t\t\t<AlertTitle>{alertDetails?.message}</AlertTitle>\n\t\t</Alert>\n\t);\n};\n\nexport default BaseAlert;\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">((props, ref) => {\n  const {\n    direction,\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Flex.displayName = \"Flex\"\n}\n","import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  ImgHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?(event: React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?(error: string | React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: ImgHTMLAttributes<any>[\"crossOrigin\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n\n    img.src = src\n\n    if (crossOrigin) {\n      img.crossOrigin = crossOrigin\n    }\n\n    if (srcSet) {\n      img.srcset = srcSet\n    }\n\n    if (sizes) {\n      img.sizes = sizes\n    }\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.((event as unknown) as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface HeadingProps extends HTMLChakraProps<\"h2\">, ThemingProps {}\n\nexport const Heading = forwardRef<HeadingProps, \"h2\">((props, ref) => {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Heading.displayName = \"Heading\"\n}\n","import * as React from \"react\"\nimport { Booleanish, EventKeys } from \"./types\"\n\nexport function getOwnerWindow(node?: HTMLElement | null) {\n  return node instanceof Element\n    ? getOwnerDocument(node).defaultView ?? window\n    : window\n}\n\nexport function getOwnerDocument(node?: HTMLElement | null) {\n  return node instanceof Element ? node.ownerDocument ?? document : document\n}\n\nexport function canUseDOM() {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.document &&\n    window.document.createElement\n  )\n}\n\nexport const isBrowser = canUseDOM()\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nexport function normalizeEventKey(event: React.KeyboardEvent) {\n  const { key, keyCode } = event\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0\n\n  const eventKey = isArrowKey ? `Arrow${key}` : key\n\n  return eventKey as EventKeys\n}\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? \"\" : undefined) as Booleanish\n\nexport const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined\n\nexport const cx = (...classNames: any[]) => classNames.filter(Boolean).join(\" \")\n\nexport function getActiveElement(node?: HTMLElement) {\n  const doc = getOwnerDocument(node)\n  return doc?.activeElement as HTMLElement\n}\n\nexport function contains(parent: HTMLElement, child: HTMLElement) {\n  return parent === child || parent.contains(child)\n}\n","import { ChangeEvent } from \"react\"\nimport { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport const isNotNumber = (value: any) =>\n  typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value)\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport const isEmptyArray = (value: any) => isArray(value) && value.length === 0\n\n// Function assertions\nexport function isFunction(value: any): value is Function {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport const isDefined = (value: any) =>\n  typeof value !== \"undefined\" && value !== undefined\n\nexport const isUndefined = (value: any): value is undefined =>\n  typeof value === \"undefined\" || value === undefined\n\n// Object assertions\nexport const isObject = (value: any): value is Dict => {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport const isEmptyObject = (value: any) =>\n  isObject(value) && Object.keys(value).length === 0\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport const isNull = (value: any): value is null => value == null\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\n// Event assertions\nexport function isInputEvent(value: any): value is ChangeEvent {\n  return value && isObject(value) && isObject(value.target)\n}\n\n// Empty assertions\nexport const isEmpty = (value: any) => {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n","import type { ImageProps } from \"@chakra-ui/image\"\nimport { useImage } from \"@chakra-ui/image\"\nimport type {\n  ChakraComponent,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface AvatarOptions {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * The size of the avatar.\n   */\n  size?: string\n  /**\n   * If `true`, the `Avatar` will show a border around it.\n   *\n   * Best for a group of avatars\n   */\n  showBorder?: boolean\n  /**\n   * The badge at the bottom right corner of the avatar.\n   */\n  children?: React.ReactNode\n  /**\n   * The image url of the `Avatar`\n   */\n  src?: string\n  /**\n   * List of sources to use for different screen resolutions\n   */\n  srcSet?: string\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * The border color of the avatar\n   * @type SystemProps[\"borderColor\"]\n   */\n  borderColor?: SystemProps[\"borderColor\"]\n  /**\n   * Function called when image failed to load\n   */\n  onError?: () => void\n  /**\n   * The default avatar used as fallback when `name`, and `src`\n   * is not specified.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * Function to get the initials to display\n   */\n  getInitials?: (name: string) => string\n}\n\nexport interface AvatarBadgeProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  const badgeStyles: SystemStyleObject = {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    right: \"0\",\n    bottom: \"0\",\n    ...styles.badge,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-avatar__badge\", props.className)}\n      __css={badgeStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\"\n}\n\nfunction initials(name: string) {\n  const [firstName, lastName] = name.split(\" \")\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n\n/**\n * The avatar name container\n */\nconst AvatarName: React.FC<AvatarNameProps> = (props) => {\n  const { name, getInitials, ...rest } = props\n  const styles = useStyles()\n\n  return (\n    <chakra.div aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nconst DefaultIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps {}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    src,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    getInitials = initials,\n    icon = <DefaultIcon />,\n    loading,\n    children,\n    borderColor,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      __css={avatarStyles}\n    >\n      <StylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          loading={loading}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.span>\n  )\n})\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\"\n}\n\ninterface AvatarImageProps\n  extends ImageProps,\n    Pick<AvatarProps, \"getInitials\" | \"borderRadius\" | \"icon\" | \"name\"> {}\n\nconst AvatarImage: React.FC<AvatarImageProps> = ({\n  src,\n  onError,\n  getInitials,\n  name,\n  borderRadius,\n  loading,\n  icon = <DefaultIcon />,\n}) => {\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      React.cloneElement(icon, { role: \"img\" })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      alt={name}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\"\n}\n","import {\n\tAvatar,\n\tBox,\n\tButton,\n\tFlex,\n\tHeading,\n\tText,\n\tuseColorMode,\n} from '@chakra-ui/react';\nimport axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Loader from '../../../components/Spinner/Spinner';\nimport { AuthContext } from '../../../store/context/AuthContext';\n\nimport useAlert from '../../../hooks/useAlert';\nimport BaseAlert from '../../../components/Alert/BaseAlert';\n\nconst FriendProfile: React.FC = () => {\n\tconst { friendId } = useParams() as any;\n\tconst { user, updateUser } = useContext(AuthContext);\n\tconst history = useHistory();\n\tconst { setAlert, isAlertOpen, alertDetails } = useAlert();\n\tconst [userFriend, setUserFriend] = useState<any>(null);\n\tconst { colorMode } = useColorMode();\n\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\tif (user.friends && user.friends.length === 0) {\n\t\t\t\treturn history.replace('/app/public');\n\t\t\t}\n\t\t\tconst userFriends = [...user.friends];\n\n\t\t\tconst friend = userFriends.find((el) => el._id === friendId);\n\n\t\t\tif (!friend) {\n\t\t\t\treturn history.replace('/app/public');\n\t\t\t}\n\n\t\t\tsetUserFriend(friend);\n\t\t}\n\t}, [history, user, friendId]);\n\n\tconst unFriend = async () => {\n\t\ttry {\n\t\t\tconst res = await axios({\n\t\t\t\turl: '/api/v1/users/unfriend',\n\t\t\t\tmethod: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\tfriend: friendId,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tupdateUser(res.data.user);\n\t\t\tsetAlert('success', 'You have unfriended this user');\n\n\t\t\tsetTimeout(() => {\n\t\t\t\thistory.replace('/app/public');\n\t\t\t}, 1800);\n\t\t} catch (err) {\n\t\t\tsetAlert('error', err.response.data.message);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{isAlertOpen && <BaseAlert alertDetails={alertDetails} />}\n\t\t\t<Flex\n\t\t\t\tmt={6}\n\t\t\t\theight='85vh'\n\t\t\t\tbgGradient={\n\t\t\t\t\tcolorMode === 'light'\n\t\t\t\t\t\t? 'linear(secondary.200, , primary.50)'\n\t\t\t\t\t\t: 'linear(gray.700, gray.700)'\n\t\t\t\t}\n\t\t\t\tdirection='column'\n\t\t\t\talignItems='center'>\n\t\t\t\t{!userFriend && <Loader />}\n\t\t\t\t{userFriend && (\n\t\t\t\t\t<Flex\n\t\t\t\t\t\th='100%'\n\t\t\t\t\t\tjustifyContent='center'\n\t\t\t\t\t\tdirection='column'\n\t\t\t\t\t\ttextAlign='center'\n\t\t\t\t\t\talignItems='center'>\n\t\t\t\t\t\t<Avatar src={userFriend.photo} boxSize='300px' mb={6} />\n\t\t\t\t\t\t<Heading textTransform='capitalize' color='primary.600'>\n\t\t\t\t\t\t\t{userFriend.fullName}\n\t\t\t\t\t\t</Heading>\n\t\t\t\t\t\t<Box my={10} textAlign='center'>\n\t\t\t\t\t\t\t<Heading mb={3} color='gray.500' fontSize='xl' fontWeight='400'>\n\t\t\t\t\t\t\t\tEmail: {userFriend.email}\n\t\t\t\t\t\t\t</Heading>\n\t\t\t\t\t\t\t<Text color='gray.600' fontSize='md'>\n\t\t\t\t\t\t\t\tJoined on {userFriend.createdAt}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t<Button onClick={unFriend} colorScheme='primary'>\n\t\t\t\t\t\t\tUnFriend\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Flex>\n\t\t\t\t)}\n\t\t\t</Flex>\n\t\t</>\n\t);\n};\n\nexport default FriendProfile;\n"],"sourceRoot":""}