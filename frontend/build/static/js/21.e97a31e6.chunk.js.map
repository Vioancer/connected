{"version":3,"sources":["../../../src/object.ts","app/hooks/useAlert.tsx","app/components/Alert/BaseAlert.tsx","../../../src/dom.ts","../../../src/grid.tsx","app/components/Form/InputField.tsx","../../../src/responsive.ts","app/utils/FieldError.tsx","assets/images/login.svg","app/pages/auth/styles/loginStyles.ts","app/pages/auth/Login.tsx"],"names":["fn","cache","memoize","key","path","index","obj","filterUndefined","object","result","Object","value","objectFilter","val","objectKeys","useAlert","useDisclosure","isOpen","onOpen","onClose","useState","alertDetails","setAlertDetails","useEffect","timer","setTimeout","clearTimeout","setAlert","status","message","isAlertOpen","onAlertClose","BaseAlert","variant","borderRadius","pos","top","xl","md","sm","m","zIndex","left","lg","maxW","window","cx","classNames","Grid","forwardRef","templateColumns","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","ref","__css","spanFn","span","mapResponsive","GridItem","rowStart","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","rowEnd","InputField","size","label","type","passwordValue","required","props","useField","name","field","error","touched","isRequired","isInvalid","mb","htmlFor","textTransform","bgColor","as","Field","color","id","prop","isArray","item","mapper","isObject","FieldError","err","errorObj","keys","errors","forEach","er","loginContainer","bgImage","bgRepeat","bgPos","bgSize","minH","templateRows","loginformContainer","base","colStart","colEnd","alignSelf","loginHeading","fontSize","fontWeight","loginBtn","colorScheme","mt","intitalValues","email","password","loginSchema","Yup","shape","Login","useContext","AuthContext","user","updateUser","history","useHistory","replace","initialValues","validationSchema","onSubmit","values","a","setErrors","axios","url","method","data","res","response","dirty","isValid","isSubmitting","autoComplete","isLoading","disabled"],"mappings":"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","file":"static/js/21.e97a31e6.chunk.js","sourcesContent":["import type { Dict, Omit } from \"./types\"\n\nexport { default as mergeWith } from \"lodash.mergewith\"\nexport { default as objectAssign } from \"object-assign\"\n\nexport function omit<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as K)) return\n    result[key] = object[key]\n  })\n\n  return result as Omit<T, K>\n}\n\nexport function pick<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result = {} as { [P in K]: T[P] }\n\n  keys.forEach((key) => {\n    if (key in object) {\n      result[key] = object[key]\n    }\n  })\n\n  return result\n}\n\nexport function split<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const picked: Dict = {}\n  const omitted: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as T[K])) {\n      picked[key] = object[key]\n    } else {\n      omitted[key] = object[key]\n    }\n  })\n\n  return [picked, omitted] as [{ [P in K]: T[P] }, Omit<T, K>]\n}\n\n/**\n * Get value from a deeply nested object using a string path.\n * Memoizes the value.\n * @param obj - the object\n * @param path - the string path\n * @param def  - the fallback value\n */\nexport function get(\n  obj: object,\n  path: string | number,\n  fallback?: any,\n  index?: number,\n) {\n  const key = typeof path === \"string\" ? path.split(\".\") : [path]\n\n  for (index = 0; index < key.length; index += 1) {\n    if (!obj) break\n    obj = obj[key[index]]\n  }\n\n  return obj === undefined ? fallback : obj\n}\n\ntype Get = (\n  obj: Readonly<object>,\n  path: string | number,\n  fallback?: any,\n  index?: number,\n) => any\n\nexport const memoize = (fn: Get) => {\n  const cache = new WeakMap()\n\n  const memoizedFn: Get = (obj, path, fallback, index) => {\n    if (typeof obj === \"undefined\") {\n      return fn(obj, path, fallback)\n    }\n\n    if (!cache.has(obj)) {\n      cache.set(obj, new Map())\n    }\n\n    const map = cache.get(obj)\n\n    if (map.has(path)) {\n      return map.get(path)\n    }\n\n    const value = fn(obj, path, fallback, index)\n\n    map.set(path, value)\n\n    return value\n  }\n\n  return memoizedFn\n}\n\nexport const memoizedGet = memoize(get)\n\n/**\n * Get value from deeply nested object, based on path\n * It returns the path value if not found in object\n *\n * @param path - the string path or value\n * @param scale - the string path or value\n */\nexport function getWithDefault(path: any, scale: any) {\n  return memoizedGet(scale, path, path)\n}\n\ntype FilterFn<T> = (value: any, key: string, object: T) => boolean\n\n/**\n * Returns the items of an object that meet the condition specified in a callback function.\n *\n * @param object the object to loop through\n * @param fn The filter function\n */\nexport function objectFilter<T extends Dict>(object: T, fn: FilterFn<T>) {\n  const result: Dict = {}\n\n  Object.keys(object).forEach((key) => {\n    const value = object[key]\n    const shouldPass = fn(value, key, object)\n    if (shouldPass) {\n      result[key] = value\n    }\n  })\n\n  return result\n}\n\nexport const filterUndefined = (object: Dict) =>\n  objectFilter(object, (val) => val !== null && val !== undefined)\n\nexport const objectKeys = <T extends Dict>(obj: T) =>\n  (Object.keys(obj) as unknown) as (keyof T)[]\n\n/**\n * Object.entries polyfill for Nodev10 compatibility\n */\nexport const fromEntries = <T extends unknown>(entries: [string, any][]) =>\n  entries.reduce((carry, [key, value]) => {\n    carry[key] = value\n    return carry\n  }, {}) as T\n","import { useDisclosure } from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { AlertProps } from '../config/types';\n\nconst useAlert = () => {\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\tconst [alertDetails, setAlertDetails] = useState<null | AlertProps>(null);\n\n\tuseEffect(() => {\n\t\tif (alertDetails) {\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tonClose();\n\t\t\t}, 2500);\n\n\t\t\treturn () => clearTimeout(timer);\n\t\t}\n\t}, [alertDetails, onClose]);\n\n\tconst setAlert = (\n\t\tstatus: 'error' | 'success' | 'info' | 'warning' = 'info',\n\t\tmessage: string\n\t) => {\n\t\tsetAlertDetails({\n\t\t\tstatus,\n\t\t\tmessage,\n\t\t});\n\t\tonOpen();\n\t};\n\n\treturn {\n\t\tsetAlert,\n\t\tisAlertOpen: isOpen,\n\t\tonAlertClose: onClose,\n\t\talertDetails: alertDetails,\n\t};\n};\n\nexport default useAlert;\n","import { Alert, AlertIcon, AlertTitle } from '@chakra-ui/react';\nimport React from 'react';\nimport { AlertProps } from './../../config/types';\n\ninterface Props {\n\talertDetails: AlertProps | null;\n}\n\nconst BaseAlert: React.FC<Props> = ({ alertDetails }) => {\n\treturn (\n\t\t<Alert\n\t\t\tvariant='solid'\n\t\t\tborderRadius='2px'\n\t\t\tpos='absolute'\n\t\t\ttop={{\n\t\t\t\t'1778px': '20%',\n\t\t\t\txl: '8%',\n\t\t\t\tmd: '6%',\n\t\t\t\tsm: '12%',\n\t\t\t}}\n\t\t\tm={{\n\t\t\t\tsm: '0 auto',\n\t\t\t}}\n\t\t\tzIndex='100'\n\t\t\tleft={{\n\t\t\t\t'1778px': '38%',\n\t\t\t\txl: '35%',\n\t\t\t\tlg: '28%',\n\t\t\t\tmd: '20%',\n\t\t\t\tsm: '0%',\n\t\t\t}}\n\t\t\tmaxW={{\n\t\t\t\tmd: '500px',\n\t\t\t\tsm: '100%',\n\t\t\t}}\n\t\t\tstatus={alertDetails?.status}>\n\t\t\t<AlertIcon />\n\t\t\t<AlertTitle>{alertDetails?.message}</AlertTitle>\n\t\t</Alert>\n\t);\n};\n\nexport default BaseAlert;\n","import * as React from \"react\"\nimport { Booleanish, EventKeys } from \"./types\"\n\nexport function getOwnerWindow(node?: HTMLElement | null) {\n  return node instanceof Element\n    ? getOwnerDocument(node).defaultView ?? window\n    : window\n}\n\nexport function getOwnerDocument(node?: HTMLElement | null) {\n  return node instanceof Element ? node.ownerDocument ?? document : document\n}\n\nexport function canUseDOM() {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.document &&\n    window.document.createElement\n  )\n}\n\nexport const isBrowser = canUseDOM()\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nexport function normalizeEventKey(event: React.KeyboardEvent) {\n  const { key, keyCode } = event\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0\n\n  const eventKey = isArrowKey ? `Arrow${key}` : key\n\n  return eventKey as EventKeys\n}\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? \"\" : undefined) as Booleanish\n\nexport const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined\n\nexport const cx = (...classNames: any[]) => classNames.filter(Boolean).join(\" \")\n\nexport function getActiveElement(node?: HTMLElement) {\n  const doc = getOwnerDocument(node)\n  return doc?.activeElement as HTMLElement\n}\n\nexport function contains(parent: HTMLElement, child: HTMLElement) {\n  return parent === child || parent.contains(child)\n}\n","import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">((props, ref) => {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">((props, ref) => {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n","import React, { InputHTMLAttributes } from 'react';\nimport { useField, Field } from 'formik';\nimport {\n\tFormControl,\n\tFormErrorMessage,\n\tFormLabel,\n\tInput,\n} from '@chakra-ui/react';\n\ntype Props = InputHTMLAttributes<HTMLInputElement> & {\n\tname: string;\n\tsize?: any;\n\tlabel: string;\n\ttype?: string;\n\tpasswordValue?: string;\n};\n\nconst InputField: React.FC<Props> = ({\n\tsize: _,\n\tlabel,\n\ttype,\n\tpasswordValue,\n\trequired = true,\n\t...props\n}) => {\n\tconst [{ name, value: __, ...field }, { error, touched, value }] = useField(\n\t\tprops\n\t);\n\n\treturn (\n\t\t<FormControl isRequired={required} isInvalid={touched && !!error} mb={5}>\n\t\t\t<FormLabel htmlFor={name} textTransform='capitalize'>\n\t\t\t\t{label}\n\t\t\t</FormLabel>\n\t\t\t<Input\n\t\t\t\tbgColor={touched && error ? 'red.200' : 'secondary.200'}\n\t\t\t\tas={Field}\n\t\t\t\tcolor='gray.700'\n\t\t\t\ttype={type}\n\t\t\t\tvalue={value}\n\t\t\t\tid={name}\n\t\t\t\t{...field}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t\t<FormErrorMessage>{touched && error ? error : ''}</FormErrorMessage>\n\t\t</FormControl>\n\t);\n};\n\nexport default InputField;\n","import { isArray, isObject } from \"./assertion\"\nimport { Dict } from \"./types\"\nimport { objectKeys } from \"./object\"\nimport { getLastItem } from \"./array\"\n\nexport const breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n","export const FieldError = (err: any) => {\n\tconst errorObj: any = {};\n\tObject.keys(err.errors).forEach((er: any) => {\n\t\terrorObj[er] = err.errors[er].message;\n\t});\n\n\treturn errorObj;\n};\n","export default __webpack_public_path__ + \"static/media/login.5309c549.svg\";","import bgImage from './../../../../assets/images/login.svg';\n\nexport const loginContainer = {\n\tbgImage: `url(${bgImage})`,\n\tbgRepeat: 'no-repeat',\n\tbgPos: {\n\t\txl: 'right 15rem',\n\t\tmd: 'right auto',\n\t\tsm: 'center 50vh',\n\t},\n\tbgSize: {\n\t\txl: 'auto',\n\t\tmd: '40rem',\n\t\tsm: '25rem',\n\t},\n\tminH: '91vh',\n\ttemplateColumns: 'repeat(12, 1fr)',\n\ttemplateRows: 'repeat(2, 1fr)',\n};\n\nexport const loginformContainer = {\n\trowStart: {\n\t\tbase: 1,\n\t},\n\trowEnd: {\n\t\txl: -1,\n\t\tsm: 2,\n\t},\n\tcolStart: {\n\t\tbase: 2,\n\t},\n\tcolEnd: {\n\t\txl: 6,\n\t\tmd: 8,\n\t\tsm: 12,\n\t},\n\talignSelf: 'center',\n};\n\nexport const loginHeading = {\n\tfontSize: '3.5rem',\n\tfontWeight: 400,\n\tmb: '2rem',\n};\n\nexport const loginBtn = {\n\tcolorScheme: 'primary',\n\tvariant: 'outline',\n\tmt: 5,\n\tborderRadius: 4,\n};\n","import React, { useContext, useEffect } from 'react';\nimport { Button, Grid, GridItem, Heading } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport InputField from '../../components/Form/InputField';\nimport {\n\tloginContainer,\n\tloginformContainer,\n\tloginBtn,\n\tloginHeading,\n} from './styles/loginStyles';\nimport { AuthContext } from '../../store/context/AuthContext';\nimport { useHistory } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport axios, { AxiosResponse } from 'axios';\nimport useAlert from '../../hooks/useAlert';\nimport BaseAlert from '../../components/Alert/BaseAlert';\nimport { FieldError } from '../../utils/FieldError';\n\nconst intitalValues = {\n\temail: '',\n\tpassword: '',\n};\n\nconst loginSchema = Yup.object().shape({\n\temail: Yup.string()\n\t\t.email('Please provide a valid email')\n\t\t.required('Please provide your email'),\n\tpassword: Yup.string().required('Please enter your password'),\n});\n\nconst Login: React.FC = () => {\n\tconst { user, updateUser } = useContext(AuthContext);\n\tconst { setAlert, alertDetails, isAlertOpen } = useAlert();\n\tconst history = useHistory();\n\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\treturn history.replace('/app/public');\n\t\t}\n\t}, [user, history]);\n\n\treturn (\n\t\t<>\n\t\t\t{isAlertOpen && <BaseAlert alertDetails={alertDetails} />}\n\t\t\t<Grid {...loginContainer}>\n\t\t\t\t<GridItem {...loginformContainer}>\n\t\t\t\t\t<Heading textTransform='uppercase' as='h3' {...loginHeading}>\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</Heading>\n\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tinitialValues={intitalValues}\n\t\t\t\t\t\tvalidationSchema={loginSchema}\n\t\t\t\t\t\tonSubmit={async (values, { setErrors }) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst res: AxiosResponse = await axios({\n\t\t\t\t\t\t\t\t\turl: '/api/v1/users/login',\n\t\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\t\tdata: { ...values },\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tsetAlert('success', 'You are logged in!!');\n\n\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\tupdateUser(res.data.user);\n\t\t\t\t\t\t\t\t}, 1500);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\t\t\t\t\tsetErrors(FieldError(err.response.data.error));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetAlert('error', err.response.data.message);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{({ dirty, isValid, isSubmitting }) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Form autoComplete='off'>\n\t\t\t\t\t\t\t\t\t<InputField name='email' label='Email' type='email' />\n\t\t\t\t\t\t\t\t\t<InputField\n\t\t\t\t\t\t\t\t\t\tname='password'\n\t\t\t\t\t\t\t\t\t\tlabel='Password'\n\t\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\t\t\t\tdisabled={(!dirty && isValid) || (dirty && !isValid)}\n\t\t\t\t\t\t\t\t\t\t{...loginBtn}\n\t\t\t\t\t\t\t\t\t\ttype='submit'>\n\t\t\t\t\t\t\t\t\t\tLOGIN\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}}\n\t\t\t\t\t</Formik>\n\t\t\t\t</GridItem>\n\t\t\t</Grid>\n\t\t</>\n\t);\n};\n\nexport default Login;\n"],"sourceRoot":""}