{"version":3,"sources":["../../../src/stack.utils.tsx","../../../src/stack.tsx","../../../src/react-helpers.ts","app/pages/notifications/notificationTypes/notificationStyles.ts","../../../src/Check.tsx","../../../src/Close.tsx","app/pages/notifications/notificationTypes/FriendReqNotification.tsx"],"names":["selector","StackItem","props","className","__css","display","flex","minWidth","Stack","forwardRef","direction","spacing","shouldWrapChildren","isInline","directionProp","styles","options","directionStyles","column","marginTop","marginStart","row","marginBottom","marginEnd","flexDirection","mapResponsive","value","getStackStyles","dividerStyle","dividerStyles","my","mx","borderLeftWidth","borderBottomWidth","getDividerStyles","hasDivider","shouldUseChildren","validChildren","children","React","child","getValidChildren","clones","isLast","index","_child","key","_divider","_className","cx","ref","alignItems","justifyContent","flexWrap","HStack","align","VStack","container","borderRadius","bg","p","pos","closebtn","color","size","top","right","senderName","fontSize","textTransform","fontWeight","iconbtn","_hover","_active","CheckIcon","createIcon","viewBox","path","fill","points","CloseIcon","displayName","d","FriendReqNotification","notification","removeNotification","useContext","NotificationContext","updateUser","AuthContext","useState","loadingAfr","setLoadingAfr","loadingRfr","setLoadingRfr","closeNotification","a","_id","axios","method","url","data","notificationId","acceptFriendRequest","friend","sender","res","user","rejectFriendRequest","type","onClick","src","photo","as","firstName","textAlign","placement","label","aria-label","hasArrow","icon"],"mappings":"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","file":"static/js/30.800a975f.chunk.js","sourcesContent":["import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\n/**\n * If we ever run into SSR issues with this, check this post to find a fix for it:\n * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c\n */\nexport const selector = \"& > *:not(style) ~ *:not(style)\"\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getStackStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const directionStyles = {\n    column: { marginTop: spacing, marginStart: 0 },\n    row: { marginStart: spacing, marginTop: 0 },\n    \"column-reverse\": { marginBottom: spacing, marginEnd: 0 },\n    \"row-reverse\": { marginEnd: spacing, marginBottom: 0 },\n  }\n\n  return {\n    flexDirection: direction,\n    [selector]: mapResponsive(direction, (value) => directionStyles[value]),\n  }\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(direction, (value) => dividerStyles[value]),\n  }\n}\n","import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/docs/layout/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => getStackStyles({ direction, spacing }), [\n    direction,\n    spacing,\n  ])\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={index}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(\n          divider as React.ReactElement<any>,\n          { __css: dividerStyle },\n        )\n\n        const _divider = isLast ? null : clonedDivider\n\n        return (\n          <React.Fragment key={index}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n","import * as React from \"react\"\nimport { isFunction } from \"./assertion\"\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  /**\n   * Error message to throw if the context is `undefined`\n   */\n  errorMessage?: string\n  /**\n   * The display name of the context\n   */\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext<ContextType>(options: CreateContextOptions = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n\n    if (!context && strict) {\n      throw new Error(errorMessage)\n    }\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport function getValidChildren(children: React.ReactNode) {\n  return React.Children.toArray(children).filter((child) =>\n    React.isValidElement(child),\n  ) as React.ReactElement[]\n}\n\ntype ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (isFunction(ref)) {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\nexport function mergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return (value: T) => {\n    refs.forEach((ref) => assignRef(ref, value))\n  }\n}\n","const styles = {\n\tcontainer: {\n\t\tborderRadius: '4px',\n\t\tbg: 'gray.800',\n\t\tp: 5,\n\t\tpos: 'relative' as any,\n\t},\n\tclosebtn: {\n\t\tcolor: '#fff',\n\t\tsize: 'sm',\n\t\tpos: 'absolute' as any,\n\t\ttop: 1,\n\t\tright: 1,\n\t},\n\tsenderName: {\n\t\tfontSize: '1.1rem',\n\t\tcolor: 'primary.500',\n\t\ttextTransform: 'capitalize' as any,\n\t\tfontWeight: 'bold' as any,\n\t},\n\ticonbtn: {\n\t\tbg: 'gray.700',\n\t\t_hover: {\n\t\t\tbg: 'gray.700',\n\t\t},\n\t\t_active: {\n\t\t\tbg: 'gray.700',\n\t\t},\n\t\tsize: 'sm',\n\t},\n};\n\nexport default styles;\n","import { createIcon } from \"@chakra-ui/icon\"\nimport * as React from \"react\"\n\nexport const CheckIcon = createIcon({\n  viewBox: \"0 0 14 14\",\n  path: (\n    <g fill=\"currentColor\">\n      <polygon points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const CloseIcon = createIcon({\n  displayName: \"CloseIcon\",\n  d:\n    \"M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z\",\n})\n","import {\n\tAvatar,\n\tBox,\n\tCloseButton,\n\tHStack,\n\tIconButton,\n\tSpinner,\n\tTooltip,\n} from '@chakra-ui/react';\nimport axios from 'axios';\nimport React, { useContext, useState } from 'react';\nimport { Notification } from '../../../config/types';\n\nimport { CloseIcon, CheckIcon } from '@chakra-ui/icons';\nimport { NotificationContext } from '../../../store/context/NotificationContext';\nimport { AuthContext } from '../../../store/context/AuthContext';\n\nimport styles from './notificationStyles';\n\ninterface Props {\n\tnotification: Notification;\n}\n\nconst FriendReqNotification: React.FC<Props> = ({ notification }) => {\n\tconst { removeNotification } = useContext(NotificationContext);\n\tconst { updateUser } = useContext(AuthContext);\n\tconst [loadingAfr, setLoadingAfr] = useState(false);\n\tconst [loadingRfr, setLoadingRfr] = useState(false);\n\n\tconst closeNotification = async () => {\n\t\tremoveNotification(notification._id);\n\t\ttry {\n\t\t\tawait axios({\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\turl: '/api/v1/notifications/hide',\n\t\t\t\tdata: {\n\t\t\t\t\tnotificationId: notification._id,\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (_) {}\n\t};\n\n\tconst acceptFriendRequest = async () => {\n\t\tsetLoadingAfr(true);\n\t\ttry {\n\t\t\tconst res = await axios({\n\t\t\t\turl: '/api/v1/users/acceptFriendRequest',\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\tdata: {\n\t\t\t\t\tfriend: notification.sender._id,\n\t\t\t\t\tnotificationId: notification._id,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst user = {\n\t\t\t\t...res.data.user,\n\t\t\t};\n\n\t\t\tupdateUser(user);\n\t\t\tremoveNotification(notification._id);\n\t\t} catch (err) {}\n\t\tsetLoadingAfr(false);\n\t};\n\n\tconst rejectFriendRequest = async () => {\n\t\tsetLoadingRfr(true);\n\t\ttry {\n\t\t\tawait axios({\n\t\t\t\turl: '/api/v1/users/rejectFriendRequest',\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\tdata: {\n\t\t\t\t\tfriend: notification.sender._id,\n\t\t\t\t\tnotificationId: notification._id,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tremoveNotification(notification._id);\n\t\t} catch (err) {}\n\t\tsetLoadingRfr(false);\n\t};\n\n\treturn (\n\t\t<Box {...styles.container}>\n\t\t\t{notification.type === 'friendRequestAccepted' && (\n\t\t\t\t<CloseButton onClick={closeNotification} {...styles.closebtn} />\n\t\t\t)}\n\n\t\t\t<HStack spacing={10}>\n\t\t\t\t<Avatar size='sm' src={notification.sender.photo} />\n\t\t\t\t<Box as='span' {...styles.senderName}>\n\t\t\t\t\t{notification.sender.firstName}\n\t\t\t\t</Box>\n\n\t\t\t\t<Box textAlign='center' fontSize='1.1rem' color='#fff'>\n\t\t\t\t\t{notification.type === 'friendRequestSent'\n\t\t\t\t\t\t? 'sent you a friend request'\n\t\t\t\t\t\t: 'accepted your friend request'}\n\t\t\t\t</Box>\n\n\t\t\t\t{notification.type === 'friendRequestSent' && (\n\t\t\t\t\t<Tooltip\n\t\t\t\t\t\tplacement='top'\n\t\t\t\t\t\tlabel='Accept Friend Request'\n\t\t\t\t\t\taria-label='Accept Friend Request tooltip'\n\t\t\t\t\t\thasArrow>\n\t\t\t\t\t\t{!loadingAfr ? (\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tonClick={acceptFriendRequest}\n\t\t\t\t\t\t\t\tcolor='green.600'\n\t\t\t\t\t\t\t\t{...styles.iconbtn}\n\t\t\t\t\t\t\t\taria-label='accept friend request'\n\t\t\t\t\t\t\t\ticon={<CheckIcon />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tcolor='green.600'\n\t\t\t\t\t\t\t\t{...styles.iconbtn}\n\t\t\t\t\t\t\t\taria-label='accept friend request loading'\n\t\t\t\t\t\t\t\ticon={<Spinner />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Tooltip>\n\t\t\t\t)}\n\t\t\t\t{notification.type === 'friendRequestSent' && (\n\t\t\t\t\t<Tooltip\n\t\t\t\t\t\tonClick={rejectFriendRequest}\n\t\t\t\t\t\tplacement='top'\n\t\t\t\t\t\tlabel='Reject Friend Request'\n\t\t\t\t\t\taria-label='Reject Friend Request tooltip'\n\t\t\t\t\t\thasArrow>\n\t\t\t\t\t\t{!loadingRfr ? (\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tcolor='red.600'\n\t\t\t\t\t\t\t\t{...styles.iconbtn}\n\t\t\t\t\t\t\t\taria-label='reject friend request'\n\t\t\t\t\t\t\t\ticon={<CloseIcon />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tcolor='green.600'\n\t\t\t\t\t\t\t\t{...styles.iconbtn}\n\t\t\t\t\t\t\t\taria-label='accept friend request loading'\n\t\t\t\t\t\t\t\ticon={<Spinner />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Tooltip>\n\t\t\t\t)}\n\t\t\t</HStack>\n\t\t</Box>\n\t);\n};\n\nexport default FriendReqNotification;\n"],"sourceRoot":""}